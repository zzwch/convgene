library(devtools)
getwd()
create("tmp")
library(tidyverse)
obj1 <- list("a", list(1, elt = "foobar"))
obj2 <- list("b", list(2, elt = "foobaz"))
x <- list(obj1, obj2)
x
my_element <- function(x) x[[2]]$elt
my_element()
my_element
pluck(x, 2, my_element)
attr_getter("n")
obj1 <- structure("obj", obj_attr = "foo")
obj2 <- structure("obj", obj_attr = "bar")
x <- list(obj1, obj2)
pluck(x, 1, attr_getter("obj_attr"))  # From first object
obj1
identity(1:5)
identity(c(1:5, NULL))
identity(c(1:5, NULL,NA))
identity(c(1:5, NULL,NA,NULL))
keep(c(1:5, NULL,NA,NULL), is_null())
keep(c(1:5, NULL,NA,NULL), is_null)
keep(c(1:5, NULL,NA,NULL), is.null)
keep(c(1:5, NULL,NA,NULL), .p = is.null)
keep(c(1:5, NULL,NA,NULL), is.null)
keep(c(1:5, NULL,NA,NULL), !is.null)
discard(c(1:5, NULL,NA,NULL), is.null)
discard(list(1:5, NULL,NA,NULL), is.null)
discard(list(1:5, NULL,NA,NULL), is.null)
keep(list(1:5, NULL,NA,NULL), is.null)
compact(list(1:5, NULL,NA,NULL), is.null)
compact(list(1:5, NULL,NA,NULL))
identity(list(1:5, NULL,NA,NULL))
library(tidyverse)
splice("a", "b")
splice(c(1:),"a", "b")
splice(c(1:5),"a", "b")
splice(c(1:5),list("a"), "b")
splice
nputs <- list(arg1 = "a", arg2 = "b")
# splice() concatenates the elements of inputs with arg3
splice(inputs, arg3 = c("c1", "c2"))
inputs <- list(arg1 = "a", arg2 = "b")
# splice() concatenates the elements of inputs with arg3
splice(inputs, arg3 = c("c1", "c2"))
inputs <- list(arg1 = "a", arg2 = "b")
# splice() concatenates the elements of inputs with arg3
splice(inputs, arg3 = c("c1", "c2")) %>% str()
x <- array(1:12, c(2, 2, 3))
x
array_branch(x)
array_tree(x)
array_tree(x, margin = 3)
x
array_tree(x, margin = 3)
array_tree(x, margin = 2)
array_tree(x, margin = 1)
array_branch(x, margin = 1)
array_tree(x, margin = 3)
cross()
data <- list(
id = c("John", "Jane"),
greeting = c("Hello.", "Bonjour."),
sep = c("! ", "... ")
)
data %>%
cross() %>%
map(lift(paste))
data
data %>%
cross()
data %>%
cross() %>% lift
data %>%
cross %>% lift
data <- list(
id = c("John", "Jane"),
greeting = c("Hello.", "Bonjour."),
sep = c("! ", "... ")
)
data %>%
cross %>%
map(lift(paste))
data <- list(
id = c("John", "Jane"),
greeting = c("Hello.", "Bonjour."),
sep = c("! ", "... ")
)
data %>%
cross %>%
lift(paste)
data <- list(
id = c("John", "Jane"),
greeting = c("Hello.", "Bonjour."),
sep = c("! ", "... ")
)
data %>%
cross %>%
map(lift(paste))
data <- list(
id = c("John", "Jane"),
greeting = c("Hello.", "Bonjour."),
sep = c("! ", "... ")
)
data %>%
cross
map(lift(paste))
data
lift(paste)(data)
map(lift(paste),(data))
map(lift(paste),data)
map(data, lift(paste))
paste(data)
lift(paste)(data)
library(devtools)
use_package("clipr")
clipr::read_clip()
clipr::read_clip()
stopifnot(clipr::clipr_available())
stopifnot(!clipr::clipr_available())
assertError(sqrt("abc"))
tools::  assertError(sqrt("abc"))
tools::assertError(sqrt("abc"))
try( assertCondition(sqrt(2), "warning") )
library(tools)
try( assertCondition(sqrt(2), "warning") )
assertCondition(sqrt("abc"), "error")
assertCondition(matrix(1:8, 4,3), "error","warning") # OK
library(devtools)
use_package("stringr")
x <- c("geneA geneb", "gene2 gene3")
geneList <- stringr::str_split(
stringr::str_squish(
stringr::str_replace_all(
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
geneList
x <- "geneA geneb"
names(x)
geneList <- stringr::str_split(
stringr::str_squish(
stringr::str_replace_all(
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
x <- c("geneA geneB", "genea geneB")
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
geneList <- unlist(geneList)
anyDuplicated(geneList)
x <- c("gene A gene", "gene B gene")
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
lapply(geneList, anyDuplicated)
any(lapply(geneList, anyDuplicated))
do.call(anay, lapply(geneList, anyDuplicated)))
do.call(anay, lapply(geneList, anyDuplicated))
do.call(any, lapply(geneList, anyDuplicated))
do.call(~which(.x>0), lapply(geneList, anyDuplicated))
do.call(function(x) which(x>0), lapply(geneList, anyDuplicated))
do.call(function(x) which(x>0), sapply(geneList, anyDuplicated))
do.call(function(x) which(x>0), list(sapply(geneList, anyDuplicated)))
print(geneList)
str_to_gene <- function(x, to_list = F, print = T){
if(missing(x)) {
if(clipr::clipr_available()){
x <- clipr::read_clip()
}else{
stop("system clipboard is not available")
}
}
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
if(!to_list) {
geneList <- unlist(geneList)
if(anyDuplicated(geneList)){
warning("returned gene list is redundant! you may use unique() to deduplicate it.")
}
}else{
dup_ind <- which(sapply(geneList, anyDuplicated) > 0)
warning(stringr::str_glue("There is/are duplicated genes in list of index {paste(dup_ind, collapse = ', ')}"))
}
if(print) print(geneList)
return(geneList)
}
str_to_gene("Tmbf adf, dfj 'fdaf'")
str_to_gene <- function(x, to_clipboard = F, as_list = F, print = T){
if(missing(x)) {
if(clipr::clipr_available()){
x <- clipr::read_clip()
}else{
stop("system clipboard is not available")
}
}
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
if(!as_list) {
geneList <- unlist(geneList)
if(anyDuplicated(geneList)){
warning("returned gene list is redundant! you may use unique() to deduplicate it.")
}
}else{
dup_ind <- which(sapply(geneList, anyDuplicated) > 0)
warning(stringr::str_glue("There is/are duplicated genes in list of index {paste(dup_ind, collapse = ', ')}"))
}
if(print) print(geneList)
if(to_clipboard) clipr::write_clip(geneList) else return(geneList)
}
x
str_to_gene()
str_to_gene(print = F)
str_to_gene(print = F, to_clipboard = T)
str_to_gene(print = F, to_clipboard = T, as_list = T)
str_to_gene <- function(x, to_clipboard = F, as_list = F, print = T){
if(missing(x)) {
if(clipr::clipr_available()){
x <- clipr::read_clip()
}else{
stop("system clipboard is not available")
}
}
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
if(!as_list) {
geneList <- unlist(geneList)
if(anyDuplicated(geneList)){
message("returned gene list is redundant! you may use unique() to deduplicate it.")
}
}else{
dup_ind <- which(sapply(geneList, anyDuplicated) > 0)
message(stringr::str_glue("There is/are duplicated genes in list of index {paste(dup_ind, collapse = ', ')}"))
}
if(print) print(geneList)
if(to_clipboard) clipr::write_clip(geneList) else return(geneList)
}
str_to_gene(print = F, to_clipboard = T, as_list = T)
dup_ind <- which(sapply(geneList, anyDuplicated) > 0)
message(stringr::str_glue("There are duplicated genes in list of index {paste(dup_ind, collapse = ', ')}"))
str_to_gene <- function(x, to_clipboard = F, as_list = F, print = T){
if(missing(x)) {
if(clipr::clipr_available()){
x <- clipr::read_clip()
}else{
stop("system clipboard is not available")
}
}
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
if(!as_list) {
geneList <- unlist(geneList)
if(anyDuplicated(geneList)){
message("returned gene list is redundant! you may use unique() to deduplicate it.")
}
}else{
dup_ind <- which(sapply(geneList, anyDuplicated) > 0)
message(stringr::str_glue("There are duplicated genes in list of index {paste(dup_ind, collapse = ', ')}"))
}
if(print) print(geneList)
if(to_clipboard) clipr::write_clip(geneList) else return(geneList)
}
str_to_gene(print = F, to_clipboard = T, as_list = T)
message(stringr::str_interp("There are duplicated genes in list of index ${paste(dup_ind, collapse = ', ')}"))
str_to_gene <- function(x, to_clipboard = F, as_list = F, print = T){
if(missing(x)) {
if(clipr::clipr_available()){
x <- clipr::read_clip()
}else{
stop("system clipboard is not available")
}
}
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
if(!as_list) {
geneList <- unlist(geneList)
if(anyDuplicated(geneList)){
message("returned gene list is redundant! you may use unique() to deduplicate it.")
}
}else{
dup_ind <- which(sapply(geneList, anyDuplicated) > 0)
message(stringr::str_interp("There are duplicated genes in list of index ${paste(dup_ind, collapse = ', ')}"))
}
if(print) print(geneList)
if(to_clipboard) clipr::write_clip(geneList) else return(geneList)
}
str_to_gene(print = F, to_clipboard = T, as_list = T)
str_to_gene <- function(x, to_clipboard = F, as_list = F, print = T){
if(missing(x)) {
if(clipr::clipr_available()){
x <- clipr::read_clip()
}else{
stop("system clipboard is not available")
}
}
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
if(!as_list) {
geneList <- unlist(geneList)
if(anyDuplicated(geneList)){
message("returned gene list is redundant! you may use unique() to deduplicate it.")
}
}else{
dup_ind <- paste(which(sapply(geneList, anyDuplicated) > 0), collapse = ', ')
message(stringr::str_interp("There are duplicated genes in list of index ${dup_ind}"))
}
if(print) print(geneList)
if(to_clipboard) clipr::write_clip(geneList) else return(geneList)
}
str_to_gene(print = F, to_clipboard = T, as_list = T)
x
message(stringr::str_glue("There are duplicated genes in list of index {dup_ind}"))
dup_ind <- paste(which(sapply(geneList, anyDuplicated) > 0), collapse = ', ')
message(stringr::str_glue("There are duplicated genes in list of index {dup_ind}"))
str_to_gene <- function(x, to_clipboard = F, as_list = F, print = T){
if(missing(x)) {
if(clipr::clipr_available()){
x <- clipr::read_clip()
}else{
stop("system clipboard is not available")
}
}
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
if(!as_list) {
geneList <- unlist(geneList)
if(anyDuplicated(geneList)){
message("returned gene list is redundant! you may use unique() to deduplicate it.")
}
}else{
dup_ind <- paste(which(sapply(geneList, anyDuplicated) > 0), collapse = ', ')
message(stringr::str_glue("There are duplicated genes in list of index {dup_ind}"))
}
if(print) print(geneList)
if(to_clipboard) clipr::write_clip(geneList) else return(geneList)
}
message(stringr::str_glue("There are duplicated genes in list of index {dup_ind}"))
str_to_gene(print = F, to_clipboard = T, as_list = T)
message(paste0("There are duplicated genes in list of index ", dup_ind))
str_to_gene <- function(x, to_clipboard = F, as_list = F, print = T){
if(missing(x)) {
if(clipr::clipr_available()){
x <- clipr::read_clip()
}else{
stop("system clipboard is not available")
}
}
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
if(!as_list) {
geneList <- unlist(geneList)
if(anyDuplicated(geneList)){
message("returned gene list is redundant! you may use unique() to deduplicate it.")
}
}else{
dup_ind <- paste(which(sapply(geneList, anyDuplicated) > 0), collapse = ', ')
message(paste0("There are duplicated genes in list of index ", dup_ind))
}
if(print) print(geneList)
if(to_clipboard) clipr::write_clip(geneList) else return(geneList)
}
str_to_gene(print = F, to_clipboard = T, as_list = T)
str_to_gene(print = F, to_clipboard = T, as_list = F)
str_to_gene(print = F, to_clipboard = T, as_list = T)
x
str_to_gene(x = x,print = F, to_clipboard = T, as_list = T)
str_to_gene <- function(x, to_clipboard = F, as_list = F, print = T){
if(missing(x)) {
if(clipr::clipr_available()){
x <- clipr::read_clip()
}else{
stop("system clipboard is not available")
}
}
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
if(!as_list) {
geneList <- unlist(geneList)
if(anyDuplicated(geneList)){
message("returned gene list is redundant! you may use unique() to deduplicate it.")
}
}else{
dup_ind <- paste(which(sapply(geneList, anyDuplicated) > 0), collapse = ', ')
message(stringr::str_glue("There are duplicated genes in list of index {dup_ind}"))
}
if(print) print(geneList)
if(to_clipboard) clipr::write_clip(geneList) else return(geneList)
}
str_to_gene(x = x,print = F, to_clipboard = T, as_list = T)
c("gene", "A", "gene")
c("gene", "B", "gene")
clipr::read_clip()
str_to_gene(print = F, to_clipboard = T, as_list = T)
c("c", "gene", "A", "gene")
c("c", "gene", "B", "gene")
x <- "geneA geneB"
str_to_gene(print = F, to_clipboard = T, as_list = T, x = x)
c("geneA", "geneB")
stringr::str_flatten(c("geneA", "geneB"))
stringr::str_flatten(x)
x
stringr::str_flatten(list(c("A", "B"), c("C", "D")))
library(stringr)
str_flatten(c("Age", "gd"))
str_flatten(list(c("Age", "gd")))
unlist(list("A", list("B", list("C"))))
str_to_char <- function(x, unique = T, sort = T, ...){
chars <- stringr::str_split(
stringr::str_flatten(unlist(x)),
"", simplify = F)[[1]]
if(unique) chars <- unique(chars)
if(sort) chars <- sort(chars, ...)
return(chars)
}
str_to_char("adfa")
str_to_char("adfa", F,F)
