geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
ggplot() +
geom_point(data = df, aes(gp, y)) +
geom_point(data = ds, aes(gp,y = mean), colour = 'red', size = 3)
base <- ggplot(mpg, aes(displ, hwy)) + geom_point()
undebug(ggplot)
base <- ggplot(mpg, aes(displ, hwy)) + geom_point()
base
base + geom_smooth()
base %+% subset(mpg, fl == "p")
base + list(subset(mpg, fl == "p"), geom_smooth())
ggplot() +
geom_point(data = df, aes(gp, y)) +
geom_point(data = ds, aes(gp,y = mean), colour = 'red', size = 3) %+% df
ggplot() +
geom_point(data = df, aes(gp, y)) +
geom_point(data = ds, aes(gp,y = mean), colour = 'red', size = 3) -> tmp
tmp %+% df
tmp
tmp %+% ds
tmp %+% subset(mpg, fl == "p")
ggplot(data = df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(gp,y = mean), colour = 'red', size = 3) -> tmp
tmp
tmp %+% mpg
add_el <- theme_grey() +
theme(text = element_text(family = "Times"))
add_el$text
rep_el <- theme_grey() %+replace%
theme(text = element_text(family = "Times"))
rep_el$text
rep_el$line
add_el$line
xmin
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
debug(geom_point)
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
library(convgene)
3/2
2/1
10/9
9/8
rmultinom(6, 5)
rmultinom(6, 5, 1/6)
rmultinom(6, , 1/6)
rmultinom(6, 6, 1/6)
rmultinom(6, 6, rep(1,6)/6)
rmultinom(6, 10, rep(1,6)/6)
rmultinom(1000, 10, rep(1,6)/6)
dmultinom(rep(1,6), prob = rep(1, 6)/6)
pnorm(1)
pnorm(0)
qnorm(0)
#' @param n.max collected 1:n.max coupons
#' @param B an integer specifying the number of replicates used in the Monte Carlo test.
#' @param seed for reproducibility
#' @param replace sample wi/o replacing
#'
#' @return a vector of probabilities for 1:n.max cllections
#' @export
#'
#' @examples
#'
pmultinom_sample <- function(prob, k = length(prob), n.max = 100, B = 1000, seed = 66, replace = TRUE){
result <- NULL
set.seed(seed)
for (i in seq_len(B)) {
result <- rbind(result, sample(paste0("k", seq_len(k)), n.max, replace=replace, prob=prob))
}
res_p <- NULL
for (j in 1:n.max) {
res_p[j] <- sum(apply(result[,1:j,drop = F], 1, function(x) length(unique(x))) == k)/B
}
return(res_p)
}
pmultinom_sample(rep(1,6)/6)
library(convgene)
2/1.5
basename("./asdfa/djfka.dd")
fs::path_ext_set("dir/file.zip", ".gz")
fs::path_ext_set
fs::path_tidy
basename("dfad/sdfa.g")
dirname("dfad/sdfa.g")
dirname("dfad/sadfa/sdfa.g")
strsplit("Adfaf/sdfadf.d", split = "d")
strsplit("Adfaf/sdfadf.d", split = ".")
strsplit("Adfaf/sdfadf.d", split = "\\.")
tmp <- strsplit("Adfaf/sdfadf.d", split = "\\.")[[1]]
paste0("F_", tmp[1])
paste0("F_", tmp[2])
paste0("F_", tmp[1,2])
paste0("F_", tmp[c(1,2)])
tmp <- strsplit("Adfaf/sdfadf.d", split = "d")[[1]]
paste0("F_", tmp[c(1,2)])
tmp[c(1,2)] <- paste0("F_", tmp[c(1,2)])
tmp
paste(tmp, collapse = "\\.")
paste(tmp, collapse = ".")
paste0(tmp, collapse = ".")
paste0(tmp, collapse = "\\.")
regexec("\\.")
#' @param prefix prefix character
#' @param sep split file name by sep into multiple parts
#' @param index add prefix to the index part
#'
#' @return new file name
#' @export
#'
#' @examples
#' prefix_file_name("./database/msigdb.gmt", "homo")
#'
prefix_file_name <- function(file_name, prefix, sep = ".", index = 1){
dir <- dirname(file_name)
base <- basename(file_name)
base.split <- strsplit(base, split = sep, fixed = T)[[1]]
base.split[index] <- paste0(prefix, base.split[index])
file.path(dir, paste(base.split, collapse = sep))
}
prefix_file_name("./database/msigdb.gmt", "homo")
#' @param sep split file name by sep into multiple parts
#' @param index add prefix to the index part
#'
#' @return new file name
#' @export
#'
#' @examples
#' prefix_file_name("./database/msigdb.gmt", "homo_")
#' # "./database/homo_msigdb.gmt"
#'
presuf_file_name <- function(file_name, prefix = NULL, suffix = NULL, sep = ".", index = 1){
dir <- dirname(file_name)
base <- basename(file_name)
base.split <- strsplit(base, split = sep, fixed = T)[[1]]
base.split[index] <- paste0(prefix, base.split[index], suffix)
file.path(dir, paste(base.split, collapse = sep))
}
presuf_file_name("./database/msigdb.gmt", "homo_")
presuf_file_name("./database/msigdb.gmt", "homo_",".v7.4")
presuf_file_name("./database/msigdb.gmt", "homo_","_v7.4")
tmp
tmp[-1]
tmp
-1 %% 10
0 %% 10
1 %% 10
-1 %% 10
-2 %% 10
-0 %% 10
end(tmp)
tail(tmp)
tmp
tail(tmp, 1)
tail(tmp, 2)
length(tmp)
length(tmp) + -1
#' @param sep split file name by sep into multiple parts
#' @param index add prefix to the index part. if <= 0, reverse order is used, then 0 is the last one and -1 is the last but one.
#'
#' @return new file name
#' @export
#'
#' @examples
#' presuf_file_name("./database/msigdb.gmt", "homo_")
#' # "./database/homo_msigdb.gmt"
#'
presuf_file_name <- function(file_name, prefix = NULL, suffix = NULL, sep = ".", index = 1){
dir <- dirname(file_name)
base <- basename(file_name)
base.split <- strsplit(base, split = sep, fixed = T)[[1]]
if(index <= 0){
index <- length(base.split) + index
}
base.split[index] <- paste0(prefix, base.split[index], suffix)
file.path(dir, paste(base.split, collapse = sep))
}
library(convgene)
homoMSigDB("D:/Project_Ube2i/analysis210105/c3.tft.gtrd.v7.4.symbols.gmt")
date()
Sys.Date()
Sys.time()
library(convgene)
tmp <- factor(1:3)
tmp
tmp <- factor(paste0("A",1:3))
tmp
tmp <- as.character(tmp)
tmp
tmp <- factor(paste0("A",1:3))
tmp
mode(tmp) <- "character"
library(convgene)
?%||%
library(convgene)
load("D:/Project_hEC/210823_results/qcData/all_used.210824.Rdata")
dim(hsa_strt_used)
dim(hsa_hash_used_used)
dim(hsa_hash_used)
dim(mmu_strt_used)
dim(mcc_hash_used)
library(convgene)
load("D:/Z_Project_VEC/mEmbryo_analysis_200920/seuratData/ep.seurat.Rdata")
table(ep$Cluster)
table(ep$Cluster_ec)
table(ep$Cluster_ep_refine_exYS)
load("D:/Z_Project_VEC/mEmbryo_analysis_200920/seuratData/ep.seurat.Rdata")
ep
dim(ep)
ep@assays$SCT %>% dim
library(magrittr)
ep@assays$SCT %>% dim
data <- matrix(1:50, 10)
data
data <- matrix(1:50, 10) %>% t
library(magrittr)
data <- matrix(1:50, 10) %>% t
group = sample(1:3, 10, replace = T)
data
cat <- unique(group) %>% sort()
js <- sapply(cat, function(x){
apply(data, 1, JSD2, q = as.numeric(group == x))
})
#' Shannon entropy for distribution P
#'
#' @param p
#'
#' @return
#' @export
#'
#' @examples
#'
H <- function(p) {
p <- p[p > 0]
p <- p/sum(p) # normalized to sum 1
return(sum(-p * log(p)))
}
#' @description
#' for more, see https://en.wikipedia.org/wiki/Jensen%E2%80%93Shannon_divergence and https://stackoverflow.com/questions/11226627/jensen-shannon-divergence-in-r
#'
JSD <- function(m) {
w <- rep(1/ncol(m), ncol(m))
return(H(m %*% w) - apply(m, 2, H) %*% w)
}
# JSD for two vector
JSD2 <- function(p, q){
JSD(cbind(p,q))
}
# JSD for two vector
JSD2 <- function(p, q){
JSD(cbind(p,q))
}
js <- sapply(cat, function(x){
apply(data, 1, JSD2, q = as.numeric(group == x))
})
js
group <- sample(c("A", "B", "C"), 10, replace = T)
js <- sapply(cat, function(x){
apply(data, 1, JSD2, q = as.numeric(group == x))
})
js
cat <- unique(group) %>% sort()
js <- sapply(cat, function(x){
apply(data, 1, JSD2, q = as.numeric(group == x))
})
js
library(convgene)
load("C:/Users/Dell/Downloads/JSD_test_data_RData")
library(philentropy)
philentropy::JSD(rbind(tmp[1,], as.numeric(group == "brEC")), est.prob = "empirical")
convgene::JSD2(tmp[1,], as.numeric(group == "brEC"), unit = log2)
convgene::JSD2(tmp[1,], as.numeric(group == "brEC"), unit = log)
convgene::JSD2(tmp[1,], as.numeric(group == "brEC"), unit = log, pseudocount = qe-16)
convgene::JSD2(tmp[1,], as.numeric(group == "brEC"), unit = log, pseudocount = 1e-16)
convgene::JSD2(tmp[1,], as.numeric(group == "brEC"), unit = log2, pseudocount = 1e-16)
philentropy::JSD(rbind(tmp[1,], as.numeric(group == "brEC")), unit = "log2", est.prob = "empirical")
library(data.table)
library(pbapply)
library(plyr)
# philentropy包用于计算JS散度，关于这个package的详细介绍在此：
# http://blog.fens.me/r-entropy/
library(philentropy)
library(ggplot2)
library(ggrepel)
library(latex2exp)
cell.info <- data.frame(Cluster = group)
rasMat <- tmp
cell.types <- names(table(cell.info$Cluster))
ctMat <- lapply(cell.types, function(i) {
as.numeric(cell.info$Cluster == i)
})
ctMat <- do.call(cbind, ctMat)
colnames(ctMat) <- cell.types
rownames(ctMat) <- rownames(cell.info)
rssMat <- pblapply(colnames(rasMat), function(i) {
sapply(colnames(ctMat), function(j) {
1 - JSD(rbind(rasMat[, i], ctMat[, j]), unit = 'log', est.prob = "empirical")
})
rssMat <- do.call(rbind, rssMat)
rownames(rssMat) <- colnames(rasMat)
colnames(rssMat) <- colnames(ctMat)
ret <- JSD_group(tmp, group)
View(ret$specificity)
View(ret$divergence)
#' @param p a discrete distribution
#' @param q a discrete distribution
#' @param pseudocount in case of elements of zero
#' @param unit log, log2, log10 used in calculation of Shannon entropy
#'
#' @return Jensen Shanonn Divergence
#' @export
#'
#' @examples
#'
JSD2 <- function(p, q, pseudocount = 1e-16, unit = log2){
JSD(cbind(p,q), pseudocount, unit)
}
ret <- JSD_group(tmp, group)
View(ret$divergence)
ret <- JSD_group(tmp, group, unit = log)
View(ret$divergence)
install.packages("vctrs")
source('D:/Research/Github/zzwch/convgene/R/tl.R', echo=TRUE)
library(convgene)
library(ggplot2)
tmp <- ggproto("Adder",
x = 0,
add = function(self, n) {
self$x <- self$x + n
self$x
}
)
tmp$add(10)
tmp
tmp$add
tmp$x
Doubler <- ggproto("Doubler", Adder,
add = function(self, n) {
ggproto_parent(Adder, self)$add(n * 2)
}
)
GeomSmooth
chull
Stat
Stat$compute_group
stat_smooth
geom_smooth
Stat
layer
library(convgene)
knitr::opts_chunk$set(echo = TRUE, #fig.height = 3, fig.width = 4,
message=FALSE, warning=FALSE,
comment = "ZZ", cache = F, dev = "pdf",
dpi = 300)
# kegg.db <- retrieveKEGG("mmu", symbol = T, gmt = F)
print(load("rdata/kegg.db.clusterProfiler.211011.Rdata"))
system("which python", intern = TRUE)
library(convgene)
reticulate::py_available("scrublet")
system.file(package = "convgene")
paste(system.file(package = "convgene"),
"scrublet.py", sep = "/")
file.path(system.file(package = "convgene"),
"scrublet.py")
reticulate::source_python(file.path(system.file(package = "convgene"),
"scrublet.py"))
do.call(scrublet_py)
do.call(scrublet_py, 1)
do.call(scrublet_py, list(1,1,1,1,1,))
do.call(scrublet_py, list(1,1,1,1,1,1))
do.call(scrublet_py, list(1,1,1,1,1,1,1,1,1,))
do.call(scrublet_py, list(1,1,1,1,1,1,1,1,1,1))
do.call(scrublet_py, list(1,1,1,1,1,1,1,1,1,1,1))
scrublet_py
library(reticulate)
py_config()
do.call(scrublet_py, list(1,1,1,1,1,1,1,1,1,1,1))
library(convgene)
options(stringsAsFactors = F)
library(tidyverse)
library(Seurat)
library(magrittr)
library(SeuratDisk)
library(convgene)
load("D:/Z_Project_CAR-T/Analysis_210114/ball_cart_ncell7578.final200816.csvs/ball_and_degs.Rdata")
p1p2p3 <- ReadH5AD(file = "p1p2p3.200613.count.h5ad")
ball <- UpdateSeuratObject(ball)
ball$dataset <- "CAR-T"
ball$batch <- "CAR-T"
p1p2p3$dataset <- "PB_T"
load("GSE130116_bm.seurat.Rdata")
ball$batch_mnn <- "CART"
p1p2p3$batch_mnn <- paste0("PB_", p1p2p3$batch)
bm$batch_mnn <- paste0("BM_",bm$V4, "_",bm$V3)
downsample_seurat <- function(object, n = 10000){
object[, sample(1:ncol(object), size = n, replace = F)]
}
bm_dn <- downsample_seurat(bm)
p1p2p3_dn <- downsample_seurat(p1p2p3)
all <- pp_fastMNN(object_list = list(ball, p1p2p3_dn, bm_dn), batch_by = "batch_mnn", scale.factor = 1e4, skip_tsne = T )
all %>% DimPlot()
all %>% DimPlot(group.by = "batch_mnn")
all %>% DimPlot(group.by = "identity")
FeaturePlot(ball, features = c("CD3D", "CD19"))
FeaturePlot(all, features = c("CD3D", "CD19"))
all %>% DimPlot(group.by = "identity", cols = scanpy_colors$default_20)
all %>% DimPlot(group.by = "batch_mnn", cols = scanpy_colors$default_20)
all$dataset
all %>% DimPlot(group.by = "dataset")
FeaturePlot(all, features = c("CD3D", "CD19"))
ball$dataset
ball$batch <- "CART"
p1p2p3$batch <- "PB"
bm$batch <- "BM"
downsample_seurat <- function(object, n = 10000){
object[, sample(1:ncol(object), size = n, replace = F)]
}
bm_dn <- downsample_seurat(bm)
p1p2p3_dn <- downsample_seurat(p1p2p3)
all <- pp_fastMNN(object_list = list(bm_dn, p1p2p3_dn, ball), batch_by = "batch_mnn", scale.factor = 1e4, skip_tsne = T )
all %>% DimPlot(group.by = "dataset")
all %>% DimPlot(group.by = "identity", cols = scanpy_colors$default_20)
all %>% DimPlot(group.by = "batch_mnn", cols = scanpy_colors$default_20)
all %>% DimPlot(group.by = "batch")
FeaturePlot(all, features = c("CD3D", "CD19"))
bm <- pp_addMitoRatio(bm)
VlnPlot(bm,features = "rMT_RNA")
bm_dn <- downsample_seurat(bm, n = 20000)
all <- pp_fastMNN(object_list = list(bm_dn, p1p2p3_dn, ball), batch_by = "batch_mnn", scale.factor = 1e4, skip_tsne = T, mnn_d = 10)
all %>% DimPlot(group.by = "batch")
all %>% DimPlot(group.by = "identity", cols = scanpy_colors$default_20)
all@reductions$mnn@cell.embeddings
all@reductions$mnn@cell.embeddings %>% dim
all <- pp_fastMNN(object_list = list(bm_dn, p1p2p3_dn, ball), batch_by = "batch_mnn", scale.factor = 1e4, skip_tsne = T, mnn_d = 50)
all %>% DimPlot(group.by = "batch")
FeaturePlot(all, features = c("CD3D", "CD19"))
all %>% DimPlot(group.by = "batch", cols = scanpy_colors$default_20)
FeaturePlot(all, features = c("CD3D", "CD19"))
all %>% DimPlot(cols = scanpy_colors$default_26)
all %>% DimPlot(group.by = "batch")
all %>% DimPlot(cols = scanpy_colors$default_26)
FeaturePlot(all, features = c("CD3D", "CD19"))
all %>% DimPlot(group.by = "identity", cols = scanpy_colors$default_20)
all %>% DimPlot(group.by = "V4", cols = scanpy_colors$default_20)
all %>% DimPlot(group.by = "batch")
FeaturePlot(all, features = c("CD3D", "CD19"))
FeaturePlot(all, features = c("CD3D"))
FeaturePlot(all, features = c("CD22"))
FeaturePlot(all, features = c("PAX5"))
all <- pp_fastMNN(object_list = list(bm_dn, p1p2p3_dn, ball), batch_by = "batch_mnn", scale.factor = 1e4, skip_tsne = T, mnn_d = 30)
all %>% DimPlot(group.by = "batch")
all %>% DimPlot(cols = scanpy_colors$default_26)
all %>% DimPlot(group.by = "identity", cols = scanpy_colors$default_20)
all %>% DimPlot(group.by = "batch")
all %>% DimPlot(cols = scanpy_colors$default_26)
FeaturePlot(all, features = c("CD3D", "CD19"))
all %<>% FindClusters(resolution = 0.3)
all %<>% FindClusters(resolution = 0.1)
all %>% DimPlot(cols = scanpy_colors$default_26)
all %<>% FindClusters(resolution = 0.2)
all %>% DimPlot(cols = scanpy_colors$default_26)
FeaturePlot(all, features = c("HBB"))
bm$CD3 <- colSums(bm@assays$RNA@counts[c("CD3D","CD3E", "CD3G", "CD247"),])
bm$CD3 <- Matrix::colSums(bm@assays$RNA@counts[c("CD3D","CD3E", "CD3G", "CD247"),])
bm_dn <- downsample_seurat(bm, n = 20000)
sum(bm_dn$CD3 > 0)
all <- pp_fastMNN(object_list = list(bm_dn[,bm_dn$CD3 > 0], p1p2p3_dn, ball), batch_by = "batch_mnn", scale.factor = 1e4, skip_tsne = T, mnn_d = 30)
all %>% DimPlot(group.by = "identity", cols = scanpy_colors$default_20)
all %>% DimPlot(group.by = "batch", cols = scanpy_colors$default_20)
FeaturePlot(all, features = c("CD3D", "CD19"))
all %>% DimPlot(group.by = "identity", cols = scanpy_colors$default_20)
all %>% DimPlot(group.by = "batch", cols = scanpy_colors$default_20)
all %>% DimPlot(cols = scanpy_colors$default_26)
FeaturePlot(all, features = c("CD3D", "CD19"))
FeaturePlot(all, features = c("CD3", "CD19"))
FeaturePlot(all, features = c("CD3G", "CD19"))
all %>% DimPlot(group.by = "identity", cols = scanpy_colors$default_20)
all %>% DimPlot(group.by = "batch", cols = scanpy_colors$default_20)
all %>% DimPlot(cols = scanpy_colors$default_26)
FeaturePlot(all, features = c("CD3G", "CD19"))
all %>% DimPlot(group.by = "V4", cols = scanpy_colors$default_20)
bm_dn_t <- bm_dn[,bm_dn$CD3 > 0]
all@meta.data %>%
ggplot() +
geom_violin(mapping = aes(batch, CD3))
FeaturePlot(all, features = c("CD3G", "CD19"))
VlnPlot(all, features = "CD3D")
all %>% DimPlot(group.by = "identity", cols = scanpy_colors$default_20)
all %>% DimPlot(group.by = "batch", cols = scanpy_colors$default_20)
all %>% DimPlot(group.by = "identity", cols = scanpy_colors$default_20)
all %>% DimPlot(group.by = "batch", cols = scanpy_colors$default_20)
all %>% DimPlot(group.by = "V4", cols = scanpy_colors$default_20)
all %>% DimPlot(cols = scanpy_colors$default_26)
FeaturePlot(all, features = c("CD3G", "CD19"))
VlnPlot(all, features = c("CD3D", "CD19"), pt.size = 0)
all %>% DimPlot(group.by = "identity", cols = scanpy_colors$default_20)
all %>% DimPlot(group.by = "batch", cols = scanpy_colors$default_20)
all %>% DimPlot(group.by = "V4", cols = scanpy_colors$default_20)
all %>% DimPlot(cols = scanpy_colors$default_26)
FeaturePlot(all, features = c("CD3G", "CD19"))
VlnPlot(all, features = c("CD3D", "CD19"), pt.size = 0)
all %>% DimPlot(cols = scanpy_colors$default_26, label = T)
VlnPlot(all, features = c("CD3G", "CD19"), pt.size = 0)
VlnPlot(all, features = c("CD3E", "CD19"), pt.size = 0)
VlnPlot(all, features = c("CD3E"), pt.size = 0)
VlnPlot(all, features = c("CD247"), pt.size = 0)
VlnPlot(all, features = c("TRAC"), pt.size = 0)
FeaturePlot(all, features = c("TRAC", "CD19"))
