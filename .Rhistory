pt_shape = 21, pt_size = "size", pt_stroke = 10)
columnCross2(edges, nodes, columns,
height = 1, flank_mult = rep(0.1, length(columns)), segment_shrink = 0.1,
linetype = "type", line_alpha = "alpha", line_color = "color", line_size = "size" ,
pt_alpha = "alpha", pt_color = "black", pt_fill = "color",
pt_shape = 21, pt_size = "size", pt_stroke = 0.1)
columns
nodes
library(convgene)
library(convgene)
library(convgene)
library(convgene)
library(convgene)
library(convgene)
library(usethis)
library(devtools)
inst("grid")
system.file("rmd", "hashtag_demux.Rmd", package = "convgene")
library(convgene)
library(convgene)
library(convgene)
getwd()
library(convgene)
system.file("rmd", "mcc_MT_genes.csv", package = "convgene")
tmp <- read.csv(file = "inst/rmd/mcc_MT_genes.csv")
View(tmp)
tmp$gene_id
knitr::opts_chunk$set(echo = TRUE,
message=T, warning=T,
cache = F, cache.lazy = F,
dev = "png", dpi = 100, fig.width = 10, fig.height = 10)
options(stringsAsFactors = F)
tmp <- read.csv(file = "inst/rmd/mcc_MT_genes.csv")
View(tmp)
tmp$gene_id
library(convgene)
library(convgene)
library(convgene)
library(convgene)
library(convgene)
knitr::opts_chunk$set(echo = TRUE)
options(stringsAsFactors = F)
rm(list = ls())
library(tidyverse)
library(magrittr)
library(Seurat)
load("D:/Z_Project_VEC/mEmbryo_analysis_200920/seuratData/major.updated.seurat.Rdata")
major$Cluster_final %>% table
load("D:/Z_Project_mHEC/HEC190324/scripts_to_github/190903_data_pk44.Rdata")
load("D:/Z_Project_mHEC/HEC190324/scripts_to_github/190903_data_T1.Rdata")
major@assays$RNA@counts %>% range
colnames(major@meta.data)
colnames(annot_pk44)
umi <- major@assays$RNA@counts
dim(umi)
genes <- rownames(major)
umi <- cbind(major@assays$RNA@counts[genes,], umi_pk44, umi_T1)
annot <- data.frame(Cluster = c(major$Cluster_final, rep("PK44", ncol(umi_pk44)), rep("T1", ncol(umi_T1))))
umi <- cbind(major@assays$RNA@counts[genes,], umi_pk44[genes, ], umi_T1[genes, ])
annot <- data.frame(Cluster = c(major$Cluster_final, rep("PK44", ncol(umi_pk44)), rep("T1", ncol(umi_T1))))
library(convgene)
expr <- umi2tpm(umi)
dim(expr)
detach("package:convgene", unload = TRUE)
library(convgene)
tpm <- umi2tpm(umi)
ggData <- data.frame(Runx1 = log2(tpm["Runx1",]/10+1),
Cluster = annot$Cluster)
ggData <- data.frame(Runx1 = log2(tpm["Runx1",]/10+1),
Cluster = annot$Cluster,
x = seq_along(ncol(umi)), y = 0)
ggData %>%
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = Runx1, color = Cluster)) +
ggData %>%
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = Runx1, color = Cluster))
seq_along(5)
seq_len(5)
ggData <- data.frame(Runx1 = log2(tpm["Runx1",]/10+1),
Cluster = annot$Cluster,
x = seq_len(ncol(umi)), y = 0)
ggData %>%
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = Runx1, color = Cluster))
ggData <- data.frame(Runx1 = log2(tpm["Runx1",]/10+1),
Cluster = annot$Cluster)
ggData <- data.frame(Runx1 = log2(tpm["Runx1",]/10+1),
Cluster = annot$Cluster) %>%
arrange(order(Cluster, Runx1)) %>%
mutate(x = seq_len(ncol(umi)), y = 0)
ggData %>%
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = Runx1, color = Cluster))
ggData <- data.frame(Runx1 = log2(tpm["Runx1",]/10+1),
Cluster = annot$Cluster) %>%
arrange(order(Cluster, Runx1)) %>%
mutate(x = seq_along(Cluster), y = 0)
ggData %>%
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = Runx1, color = Cluster))
View(ggData)
ggData <- data.frame(Runx1 = log2(tpm["Runx1",]/10+1),
Cluster = annot$Cluster) %>%
arrange(desc(Cluster, Runx1)) %>%
mutate(x = seq_along(Cluster), y = 0)
ggData %>%
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = Runx1, color = Cluster))
ggData <- data.frame(Runx1 = log2(tpm["Runx1",]/10+1),
Cluster = annot$Cluster) %>%
arrange(desc(Cluster), desc(Runx1)) %>%
mutate(x = seq_along(Cluster), y = 0)
ggData %>%
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = Runx1, color = Cluster))
ggData <- data.frame(Runx1 = log2(tpm["Runx1",]/10+1),
Cluster = annot$Cluster) %>%
arrange(desc(Cluster), (Runx1)) %>%
mutate(x = seq_along(Cluster), y = 0)
ggData %>%
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = Runx1, color = Cluster))
ggData <- data.frame(Runx1 = log2(tpm["Runx1",]/10+1),
Cluster = annot$Cluster) %>%
filter(Cluster %in% c(paste0("EP", c(7,6,0,1,2,3,4)), "PK44", "T1", "EP5")) %>%
mutate(Cluster = factor(Cluster, levels = c(paste0("EP", c(7,6,0,1,2,3,4)), "PK44", "T1", "EP5"))) %>%
arrange(desc(Cluster), (Runx1)) %>%
mutate(x = seq_along(Cluster), y = 0)
ggData %>%
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = Runx1, color = Cluster))
table(ggData$Cluster)
cumsum(table(ggData$Cluster))
seq_along(1:%)
seq_along(1:5)
ggData %>%
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = Runx1, color = Cluster)) +
geom_vline(mapping = aes(xintercept = c(1, cumsum(table(ggData$Cluster)))))
c(1, cumsum(table(ggData$Cluster)))
unlist(c(1, cumsum(table(ggData$Cluster))))
unname(c(1, cumsum(table(ggData$Cluster))))
ggData %>%
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = Runx1, color = Cluster)) +
geom_vline(mapping = aes(xintercept = c(1, unname(cumsum(table(ggData$Cluster))))))
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = Runx1, color = Cluster),
data = ggData ) +
geom_vline(mapping = aes(xintercept = c(1, unname(cumsum(table(ggData$Cluster))))))
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = Runx1, color = Cluster),
data = ggData ) +
geom_vline(mapping = aes(xintercept = c(1, unname(cumsum(table(ggData$Cluster))))),
color = "black", linetype = "dashed")
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = Runx1, color = Cluster),
data = ggData ) +
geom_vline(mapping = aes(xintercept = c(1, unname(cumsum(table(ggData$Cluster))))),
color = "black", linetype = "dashed") +
theme_void()
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = Runx1, color = Cluster),
data = ggData ) +
geom_vline(mapping = aes(xintercept = c(1, unname(cumsum(table(ggData$Cluster))))),
color = "black", linetype = "dashed") +
theme_bw()
ggData <- data.frame(Runx1 = log2(tpm["Runx1",]/10+1),
Cluster = annot$Cluster) %>%
filter(Cluster %in% c(paste0("EP", c(7,6,0,1,2,3,4)), "PK44", "T1", "EP5")) %>%
mutate(Cluster = factor(Cluster, levels = c(paste0("EP", c(7,6,0,1,2,3,4)), "PK44", "T1", "EP5"))) %>%
arrange(Cluster, (Runx1)) %>%
mutate(x = seq_along(Cluster), y = 0)
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = Runx1, color = Cluster),
data = ggData ) +
geom_vline(mapping = aes(xintercept = c(1, unname(cumsum(table(ggData$Cluster))))),
color = "black", linetype = "dashed") +
theme_bw() +
labs(x = "")
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = Runx1, color = Cluster),
data = ggData ) +
geom_vline(mapping = aes(xintercept = c(1, unname(cumsum(table(ggData$Cluster))))),
color = "black", linetype = "dashed") +
theme_bw() +
labs(x = "", y = "Expression")
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = Runx1, color = Cluster),
data = ggData ) +
geom_vline(mapping = aes(xintercept = c(1, unname(cumsum(table(ggData$Cluster))))),
color = "black", linetype = "dashed") +
theme_bw() +
labs(x = "", y = "Expression", title = "Runx1")
final_colors <- c(EP0 = "pink", EP1 = "#A020F1", EP2 = "#000000", EP3 = "#0403E5",
EP4 = "#FF8C01", EP5 = "#8B0101", EP6 = "#007502", EP7 = "#FE0000",
Allantois = "#4A95FB", HC = "#FFFF01",
PK44 = "#9A7A01", T1 = "#017F8B", YS3 = "#05FDFF",
Neg = "grey", un = "grey", EC_excluded = "grey", EP_YSloc = "grey", YS_EPloc = "grey")
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = Runx1, color = Cluster),
data = ggData ) +
geom_vline(mapping = aes(xintercept = c(1, unname(cumsum(table(ggData$Cluster))))),
color = "black", linetype = "dashed") +
scale_color_manual(values = final_colors) +
theme_bw() +
labs(x = "", y = "Expression", title = "Runx1") +
theme()
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = Runx1, color = Cluster),
data = ggData ) +
geom_vline(mapping = aes(xintercept = c(1, unname(cumsum(table(ggData$Cluster))))),
color = "black", linetype = "dashed") +
scale_color_manual(values = final_colors) +
theme_bw() +
labs(x = "", y = "Expression", title = "Runx1") +
theme()
final_colors <- c(EP0 = "pink", EP1 = "#A020F1", EP2 = "#000000", EP3 = "#0403E5",
EP4 = "#FF8C01", EP5 = "#8B0101", EP6 = "#007502", EP7 = "#FE0000",
Allantois = "#4A95FB", HC = "#FFFF01",
PK44 = "#9A7A01", T1 = "#017F8B", YS3 = "#05FDFF",
Neg = "grey", un = "grey", EC_excluded = "grey", EP_YSloc = "grey", YS_EPloc = "grey")
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = Runx1, color = Cluster),
data = ggData ) +
geom_vline(mapping = aes(xintercept = c(1, unname(cumsum(table(ggData$Cluster))))),
color = "black", linetype = "dashed") +
scale_color_manual(values = final_colors) +
theme_bw() +
labs(x = "", y = "Expression", title = "Runx1") +
theme()
pl_segmentPlot <- function(x, cluster){
ggData <- data.frame(yend = x,
Cluster = cluster) %>%
arrange(Cluster, xend) %>%
mutate(x = seq_along(Cluster), y = 0)
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = yend, color = Cluster),
data = ggData ) +
geom_vline(mapping = aes(xintercept = c(1, unname(cumsum(table(ggData$Cluster))))),
color = "black", linetype = "dashed") +
scale_x_continuous(expand = expansion()) +
scale_y_continuous(expand = expansion(c(0, 0.1)))
}
pl_segmentPlot(ggData$Runx1, ggData$Cluster)
pl_segmentPlot <- function(x, cluster){
ggData <- data.frame(yend = x,
Cluster = cluster) %>%
arrange(Cluster, yend) %>%
mutate(x = seq_along(Cluster), y = 0)
ggplot() +
geom_segment(mapping = aes(x = x, y = y, xend = x, yend = yend, color = Cluster),
data = ggData ) +
geom_vline(mapping = aes(xintercept = c(1, unname(cumsum(table(ggData$Cluster))))),
color = "black", linetype = "dashed") +
scale_x_continuous(expand = expansion()) +
scale_y_continuous(expand = expansion(c(0, 0.1)))
}
pl_segmentPlot(ggData$Runx1, ggData$Cluster)
pl_segmentPlot(ggData$Runx1, ggData$Cluster) + theme_bw()
detach("package:convgene", unload = TRUE)
library(convgene)
pl_segmentPlot(ggData$Runx1, ggData$Cluster) +
scale_color_manual(values = final_colors) +
labs(x = "", y = "Expression", title = "Runx1")
rm(pl_segmentPlot())
rm(pl_segmentPlot
)
pl_segmentPlot(ggData$Runx1, ggData$Cluster) +
scale_color_manual(values = final_colors) +
labs(x = "", y = "Expression", title = "Runx1")
pl_segmentPlot(ggData$Runx1, ggData$Cluster) +
scale_color_manual(values = final_colors) +
labs(x = "", y = "Expression", title = "Runx1") +
coord_flip()
library(Seurat)
pbmc_small %>% dim
library(magt)
library(magrittr)
pbmc_small %>% dim
}
AveFeaturePlot <- function(object, features, slot = "data", assay = NULL,
reduction = "umap", dims = c(1,2), order = F,
pt.size = 1, coord_ratio = 1,
cols = c("grey", "yellow", "red")){
data <- GetAssayData(object, slot, assay)[features,,drop = F]
dimension <- Embeddings(object, reduction = reduction)[,dims]
xy <- colnames(dimension)
ggData <- as.data.frame(cbind(dimension, Average = apply(data,2, ExpMean)))
ggplot(data = if(order) ggData %>% arrange(ggData$Average) else ggData,
mapping = aes_string(x = xy[1], y = xy[2], color = "Average")) +
geom_point(size = pt.size) +
scale_color_gradientn(colours = cols) +
coord_fixed(ratio = coord_ratio) +
labs(title = paste0("Average Expression of ", paste(features, sep = ", "))) +
guides(color = guide_colorbar(title = NULL)) +
theme_classic() +
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold.italic"),
panel.border = element_rect(fill = NA, color = "black"))
}
library(Seurat)
rownames(pbmc_small)
AveFeaturePlot(pbmc_small, features = c("CD79B","CD79A", "HLA-DRA"))
AveFeaturePlot(pbmc_small, features = c("CD79B","CD79A", "HLA-DRA"),
reduction = "tsne")
AveFeaturePlot <- function(object, features, slot = "data", assay = NULL,
reduction = "umap", dims = c(1,2), order = F,
pt.size = 1, coord_ratio = 1,
cols = c("grey", "yellow", "red")){
data <- GetAssayData(object, slot, assay)[features,,drop = F]
dimension <- Embeddings(object, reduction = reduction)[,dims]
xy <- colnames(dimension)
ggData <- as.data.frame(cbind(dimension, Average = apply(data,2, ExpMean)))
require(ggplot2)
ggplot(data = if(order) ggData %>% arrange(ggData$Average) else ggData,
mapping = aes_string(x = xy[1], y = xy[2], color = "Average")) +
geom_point(size = pt.size) +
scale_color_gradientn(colours = cols) +
coord_fixed(ratio = coord_ratio) +
labs(title = paste0("Average Expression of ", paste(features, sep = ", "))) +
guides(color = guide_colorbar(title = NULL)) +
theme_classic() +
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold.italic"),
panel.border = element_rect(fill = NA, color = "black"))
}
AveFeaturePlot(pbmc_small, features = c("CD79B","CD79A", "HLA-DRA"),
reduction = "tsne")
AveFeaturePlot <- function(object, features, slot = "data", assay = NULL,
reduction = "umap", dims = c(1,2), order = F,
pt.size = 1, coord_ratio = NULL,
cols = c("grey", "yellow", "red")){
data <- GetAssayData(object, slot, assay)[features,,drop = F]
dimension <- Embeddings(object, reduction = reduction)[,dims]
xy <- colnames(dimension)
ggData <- as.data.frame(cbind(dimension, Average = apply(data,2, ExpMean)))
require(ggplot2)
ggplot(data = if(order) ggData %>% arrange(ggData$Average) else ggData,
mapping = aes_string(x = xy[1], y = xy[2], color = "Average")) +
geom_point(size = pt.size) +
scale_color_gradientn(colours = cols) +
coord_fixed(ratio = coord_ratio) +
labs(title = paste0("Average Expression of ", paste(features, sep = ", "))) +
guides(color = guide_colorbar(title = NULL)) +
theme_classic() +
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold.italic"),
panel.border = element_rect(fill = NA, color = "black"))
}
AveFeaturePlot(pbmc_small, features = c("CD79B","CD79A", "HLA-DRA"),
reduction = "tsne")
AveFeaturePlot <- function(object, features, slot = "data", assay = NULL,
reduction = "umap", dims = c(1,2), order = F,
pt.size = 1, coord_ratio = 1,
cols = c("grey", "yellow", "red")){
data <- GetAssayData(object, slot, assay)[features,,drop = F]
dimension <- Embeddings(object, reduction = reduction)[,dims]
xy <- colnames(dimension)
ggData <- as.data.frame(cbind(dimension, Average = apply(data,2, ExpMean)))
require(ggplot2)
ggplot(data = if(order) ggData %>% arrange(ggData$Average) else ggData,
mapping = aes_string(x = xy[1], y = xy[2], color = "Average")) +
geom_point(size = pt.size) +
scale_color_gradientn(colours = cols) +
coord_fixed(ratio = coord_ratio) +
labs(title = paste0("Average Expression of ", paste(features, sep = ", "))) +
guides(color = guide_colorbar(title = NULL)) +
theme_classic() +
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold.italic"),
panel.border = element_rect(fill = NA, color = "black"))
}
library(Seurat)
AveFeaturePlot(pbmc_small, features = c("CD79B","CD79A", "HLA-DRA"),
reduction = "tsne")
AveFeaturePlot <- function(object, features, slot = "data", assay = NULL,
reduction = "umap", dims = c(1,2), order = F,
pt.size = 1, coord_ratio = 1,
cols = c("grey", "yellow", "red")){
data <- GetAssayData(object, slot, assay)[features,,drop = F]
dimension <- Embeddings(object, reduction = reduction)[,dims]
xy <- colnames(dimension)
ggData <- as.data.frame(cbind(dimension, Average = apply(data,2, ExpMean)))
require(ggplot2)
ggplot(data = if(order) ggData %>% arrange(ggData$Average) else ggData,
mapping = aes_string(x = xy[1], y = xy[2], color = "Average")) +
geom_point(size = pt.size) +
scale_color_gradientn(colours = cols) +
coord_fixed(ratio = coord_ratio) +
labs(title = paste0("Average Expression of ", paste(features, sep = ", "))) +
guides(color = guide_colorbar(title = NULL)) +
theme_classic() +
theme(#axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_blank(),
#plot.title = element_text(hjust = 0.5, face = "bold.italic"),
panel.border = element_rect(fill = NA, color = "black"))
}
library(Seurat)
AveFeaturePlot(pbmc_small, features = c("CD79B","CD79A", "HLA-DRA"),
reduction = "tsne")
ggplot(data = if(order) ggData %>% arrange(ggData$Average) else ggData,
mapping = aes_string(x = xy[1], y = xy[2], color = "Average")) +
geom_point(size = pt.size) +
scale_color_gradientn(colours = cols) +
coord_fixed(ratio = coord_ratio) +
labs(title = paste0("Average Expression of ", paste(features,collapse = ", "))) +
guides(color = guide_colorbar(title = NULL)) +
theme_classic() +
theme(#axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_blank(),
#plot.title = element_text(hjust = 0.5, face = "bold.italic"),
panel.border = element_rect(fill = NA, color = "black"))
AveFeaturePlot <- function(object, features, slot = "data", assay = NULL,
reduction = "umap", dims = c(1,2), order = F,
pt.size = 1, coord_ratio = 1,
cols = c("grey", "yellow", "red")){
data <- GetAssayData(object, slot, assay)[features,,drop = F]
dimension <- Embeddings(object, reduction = reduction)[,dims]
xy <- colnames(dimension)
ggData <- as.data.frame(cbind(dimension, Average = apply(data,2, ExpMean)))
require(ggplot2)
ggplot(data = if(order) ggData %>% arrange(ggData$Average) else ggData,
mapping = aes_string(x = xy[1], y = xy[2], color = "Average")) +
geom_point(size = pt.size) +
scale_color_gradientn(colours = cols) +
coord_fixed(ratio = coord_ratio) +
labs(title = paste0("Average Expression of ", paste(features,collapse = ", "))) +
guides(color = guide_colorbar(title = NULL)) +
theme_classic() +
theme(#axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_blank(),
#plot.title = element_text(hjust = 0.5, face = "bold.italic"),
panel.border = element_rect(fill = NA, color = "black"))
}
library(Seurat)
AveFeaturePlot(pbmc_small, features = c("CD79B","CD79A", "HLA-DRA"),
reduction = "tsne")
AveFeaturePlot <- function(object, features, slot = "data", assay = NULL,
reduction = "umap", dims = c(1,2), order = F,
pt.size = 1, coord_ratio = 1,
cols = c("grey", "yellow", "red")){
data <- GetAssayData(object, slot, assay)[features,,drop = F]
dimension <- Embeddings(object, reduction = reduction)[,dims]
xy <- colnames(dimension)
ggData <- as.data.frame(cbind(dimension, Average = apply(data,2, ExpMean)))
require(ggplot2)
ggplot(data = if(order) ggData %>% arrange(ggData$Average) else ggData,
mapping = aes_string(x = xy[1], y = xy[2], color = "Average")) +
geom_point(size = pt.size) +
scale_color_gradientn(colours = cols) +
coord_fixed(ratio = coord_ratio) +
labs(title = paste0("Average expression of ", paste(features,collapse = ", "))) +
guides(color = guide_colorbar(title = NULL)) +
theme_classic() +
theme(#axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_blank(),
#plot.title = element_text(hjust = 0.5, face = "bold.italic"),
panel.border = element_rect(fill = NA, color = "black"))
}
library(Seurat)
AveFeaturePlot(pbmc_small, features = c("CD79B","CD79A", "HLA-DRA"),
reduction = "tsne")
AveFeaturePlot <- function(object, features, slot = "data", assay = NULL,
reduction = "umap", dims = c(1,2), order = F,
pt.size = 1, coord_ratio = 1,
cols = c("grey", "yellow", "red")){
data <- GetAssayData(object, slot, assay)[features,,drop = F]
dimension <- Embeddings(object, reduction = reduction)[,dims]
xy <- colnames(dimension)
ggData <- as.data.frame(cbind(dimension, Average = apply(data,2, ExpMean)))
require(ggplot2)
ggplot(data = if(order) ggData %>% arrange(ggData$Average) else ggData,
mapping = aes_string(x = xy[1], y = xy[2], color = "Average")) +
geom_point(size = pt.size) +
scale_color_gradientn(colours = cols) +
coord_fixed(ratio = coord_ratio) +
labs(title = paste0("Average expression of ", paste(features,collapse = ", "))) +
guides(color = guide_colorbar(title = NULL)) +
theme_classic() +
theme(#axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold.italic"),
panel.border = element_rect(fill = NA, color = "black"))
}
library(Seurat)
AveFeaturePlot(pbmc_small, features = c("CD79B","CD79A", "HLA-DRA"),
reduction = "tsne")
library(Seurat)
