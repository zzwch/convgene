log_base = "log",
do_by_log = F,
outlier_cutoff = 1)
summariseOptions = list(
method = c(base::mean, stats::median),
log_base = "log",
do_by_log = F,
outlier_cutoff = 1)
summariseOptions$method
summariseOptions$method[[2]]
summariseOptions$method[[2]](1:10)
exp(1)
power(2)
??pow
tmp <- base::mean
tmp[1]
tmp
c(tmp, tmp)
tmp【【1
tmp[[1]]
quantile(1:10, probs = 0.99)
quantile(1:10, probs = 1)
tmp <- -1:-10
tmp
tmp[tmp>0]
quantile(tmp[tmp>0], 1)
which(quantile(tmp[tmp>0], 1))
tmp <- factor(letters)
tmp
setdiff("a", tmp)
setdiff(c(5,3,2,7), 2)
devtools::load_all(".")
load("D:/Project_hEC/200413_Preparation_for_Nature/data_STRT-seq/200227_humanec_data/200227.ec_used.analysis.Rdata")
pl_dotplot(data = ec_used@data,features = c("PECAM1", "PTPRC"), group_by = ec_used@meta.data$Cluster, title = "haha")
devtools::load_all(".")
pl_dotplot(data = ec_used@data,features = c("PECAM1", "PTPRC"), group_by = ec_used@meta.data$Cluster, title = "haha")
devtools::load_all(".")
pl_dotplot(data = ec_used@data,features = c("PECAM1", "PTPRC"), group_by = ec_used@meta.data$Cluster, title = "haha")
use_dev_version()
use_package("ggplot2")
devtools::load_all(".")
pl_dotplot(data = ec_used@data,features = c("PECAM1", "PTPRC"), group_by = ec_used@meta.data$Cluster, title = "haha")
is.na(NA)
is.na(NA) | is.na(NULL)
is.na(NA) | is.na(NULL) == TRUE
is.na(NA) | is.na(NULL) == FALSE
is.na(NA) | is.null(NULL) == FALSE
is.na(NA) | is.null(NULL)
is.na(NA,NA) | is.null(NULL)
is.na(c(NA,NA)) | is.null(c(NULL, NULL))
devtools::load_all(".")
pl_dotplot(data = ec_used@data,features = c("PECAM1", "PTPRC"), group_by = ec_used@meta.data$Cluster, title = "haha")
devtools::load_all(".")
pl_dotplot(data = ec_used@data,features = c("PECAM1", "PTPRC"), group_by = ec_used@meta.data$Cluster, title = "haha")
is.na(NULL) | is.null(NULL)
is.na(NULL)
is.null(NULL) | is.na(NULL)
is.null(NULL)
is.null(NULL) | is.na(NULL)
is.null(NULL) || is.na(NULL)
x[1]
NULL[1]
NULL[[1]]
is.na(NA) || is.null(NA)
is.na(NULL) || is.null(NA)
is.na(NULL)
is.na(NULL) || is.null(NULL)
is.na(NULL) || is.null(NA)
is.null(NA)
is.na(NULL) || is.null(NA)
is.na(NULL)
is.null(NA)||is.na(NULL)
is.null(NA) || is.na(NULL)
is.null(NA)
is.null(NA) || is.na(NULL)
is.na(NULL)
is.null(NA)
devtools::load_all(".")
pl_dotplot(data = ec_used@data,features = c("PECAM1", "PTPRC"), group_by = ec_used@meta.data$Cluster, title = "haha")
devtools::load_all(".")
pl_dotplot(data = ec_used@data,features = c("PECAM1", "PTPRC"), group_by = ec_used@meta.data$Cluster, title = "haha")
devtools::load_all(".")
pl_dotplot(data = ec_used@data,features = c("PECAM1", "PTPRC"), group_by = ec_used@meta.data$Cluster, title = "haha")
devtools::load_all(".")
pl_dotplot(data = ec_used@data,features = c("PECAM1", "PTPRC"), group_by = ec_used@meta.data$Cluster, title = "haha")
devtools::load_all(".")
pl_dotplot(data = ec_used@data,features = c("PECAM1", "PTPRC"), group_by = ec_used@meta.data$Cluster, title = "haha")
devtools::load_all(".")
devtools::load_all(".")
pl_vioboxplot(ec_used@meta.data, x = "Cluster", y = "S_Score")
colnames(ec_used@meta.data)
pl_vioboxplot(ec_used@meta.data, x = "Cluster", y = "S.Score")
devtools::load_all(".")
pl_vioboxplot(ec_used@meta.data, x = "Cluster", y = "S.Score")
exp(1)
e^1
eexp^1
exp^1
class(ec_used@data)
ec_used@data[,1:5,drop = F]
ec_used@data[,1,drop = F]
scale(ec_used@data[1:5, 1:5])
ec_used@data[1:5, 1:5]
2^ec_used@data[1:5, 1:5]
devtools::load_all(".")
pl_stackedViolinPlot
devtools::load_all(".")
data <- ec_used@data
group_by <- ec_used@meta.data$Cluster
pl_stackedViolinPlot(data, group_by, features = c("PECAM1", "CDH5","PTPRC"))
devtools::load_all(".")
pl_stackedViolinPlot(data, group_by, features = c("PECAM1", "CDH5","PTPRC"))
devtools::load_all(".")
pl_stackedViolinPlot(data, group_by, features = c("PECAM1", "CDH5","PTPRC"))
devtools::load_all(".")
pl_stackedViolinPlot(data, group_by, features = c("PECAM1", "CDH5","PTPRC"))
debug(pl_stackedViolinPlot)
pl_stackedViolinPlot(data, group_by, features = c("PECAM1", "CDH5","PTPRC"))
View(ggData)
cbind(t(as.matrix(data[features,,drop = F])),
Group = group_by)
reshape2::melt(cbind(t(as.matrix(data[features,,drop = F])),
Group = group_by),
id.vars = "Group", measure.vars = features,
variable.name = 'Gene',value.name = 'Expression')
melt(cbind(t(as.data.frame(as.matrix(data[features,,drop = F]))),
Group = group_by),
id.vars = "Group", measure.vars = features,
variable.name = 'Gene',value.name = 'Expression') %>% head
melt(cbind(t(as.data.frame(as.matrix(data[features,,drop = F])),
Group = group_by)),
id.vars = "Group", measure.vars = features,
variable.name = 'Gene',value.name = 'Expression') %>% head
melt(as.data.frame(cbind(t(as.matrix(data[features,,drop = F])),
Group = group_by)),
id.vars = "Group", measure.vars = features,
variable.name = 'Gene',value.name = 'Expression') %>% head
melt(as.data.frame(cbind(t(as.matrix(data[features,,drop = F])),
Group = group_by)),
id.vars = "Group", measure.vars = features,
variable.name = 'Gene',value.name = 'Expression') %>% head
features <- c("PECAM1", "CDH5", "PTPRC")
t(data[features,,drop = F])
devtools::load_all(".")
pl_stackedViolinPlot(data, group_by, features = c("PECAM1", "CDH5","PTPRC"))
group_by
droplevels(1:5)
devtools::load_all(".")
pl_stackedViolinPlot(data, group_by, features = c("PECAM1", "CDH5","PTPRC"))
groups
group_by
setdiff("a",group_by)
setdiff("brEC",group_by)
debug(pl_stackedViolinPlot)
pl_stackedViolinPlot(data, group_by, features = c("PECAM1", "CDH5","PTPRC"))
group_by_()
group_by
group_by
View(ggData)
as.data.frame(
cbind(t(as.matrix(data[features,,drop = F])),
Group = group_by)
) %>% head
group_by
as.data.frame(
cbind(t(as.matrix(data[features,,drop = F])),
Group = group_by)
)
cbind(as.data.frame(
t(as.matrix(data[features,,drop = F]))),
Group = group_by)
devtools::load_all(".")
pl_stackedViolinPlot(data, group_by, features = c("PECAM1", "CDH5","PTPRC"))
devtools::load_all(".")
devtools::load_all(".")
pl_stackedViolinPlot(data, group_by, features = c("PECAM1", "CDH5","PTPRC"))
devtools::load_all(".")
pl_stackedViolinPlot(data, group_by, features = c("PECAM1", "CDH5","PTPRC"))
devtools::load_all(".")
devtools::load_all(".")
pl_stackedViolinPlot(data, group_by, features = c("PECAM1", "CDH5","PTPRC"))
devtools::load_all(".")
pl_stackedViolinPlot(data, group_by, features = c("PECAM1", "CDH5","PTPRC"))
devtools::load_all(".")
pl_stackedViolinPlot(data, group_by, features = c("PECAM1", "CDH5","PTPRC"))
devtools::load_all(".")
pl_stackedViolinPlot(data, group_by, features = c("PECAM1", "CDH5","PTPRC"))
pl_stackedViolinPlot(data, group_by, features = c("PECAM1", "CDH5","PTPRC"), fill_colors = Seurat::DiscretePalette(11))
pl_stackedViolinPlot(data, group_by, features = c("PECAM1", "CDH5","PTPRC"), fill_colors = Seurat::DiscretePalette(12))
is.null(Seurat::DiscretePalette(12))
is.na(Seurat::DiscretePalette(12))
devtools::load_all(".")
pl_stackedViolinPlot(data, group_by, features = c("PECAM1", "CDH5","PTPRC"), fill_colors = Seurat::DiscretePalette(12))
devtools::load_all(".")
usethis::use_data(data, overwrite = TRUE)
devtools::load_all(".")
save(ec_used, data, features, group_by, ec_cluster_color, file = "testdata.Rdata")
getwd()
devtools::load_all(".")
expect_success(pl_dotplot(data, features, group_by, groups = c("brEC","unEC",'liEC')))
expect_success(pl_dotplot(data, features, group_by, groups = c("brEC","unEC",'liEC')))
devtools::load_all(".")
expect_success(pl_dotplot(data, features, group_by, groups = c("brEC","unEC",'liEC')))
devtools::load_all(".")
expect_success(pl_dotplot(data, features, group_by, groups = c("brEC","unEC",'liEC')))
devtools::load_all(".")
expect_success(pl_dotplot(data, features, group_by, groups = c("brEC","unEC",'liEC')))
devtools::load_all(".")
expect_success(pl_dotplot(data, features, group_by, groups = c("brEC","unEC",'liEC')))
devtools::load_all(".")
expect_success(pl_dotplot(data, features, group_by, groups = c("brEC","unEC",'liEC')))
pl_dotplot(data, features, group_by, groups = c("brEC","unEC",'liEC'))
devtools::load_all(".")
devtools::load_all(".")
pl_dotplot(data, features, group_by, groups = c("brEC","unEC",'liEC'))
debug(pl_dotplot)
pl_dotplot(data, features, group_by, groups = c("brEC","unEC",'liEC'))
devtools::load_all(".")
pl_dotplot(data, features, group_by, groups = c("brEC","unEC",'liEC'))
debug(pl_dotplot)
pl_dotplot(data, features, group_by, groups = c("brEC","unEC",'liEC'))
data
pl_dotplot(data, features, group_by, groups = c("brEC","unEC",'liEC'))
devtools::load_all(".")
pl_dotplot(data, features, group_by, groups = c("brEC","unEC",'liEC'))
devtools::load_all(".")
pl_dotplot(data, features, group_by, groups = c("brEC","unEC",'liEC'))
devtools::load_all(".")
devtools::load_all(".")
expect_success(pl_dotplot(data, features, group_by, groups = c("brEC","unEC",'liEC')))
capture_expectation(pl_dotplot(data, features, group_by, groups = c("brEC","unEC",'liEC')))
expect_equal(pl_dotplot(data, features, group_by, groups = c("brEC","unEC",'liEC')), NULL)
test_file("tests/testthat/test-pl.R")
test_file("tests/testthat/test-pl.R")
devtools::load_all(".")
library(convgene)
library(convgene)
test_file("tests/testthat/test-pl.R")
pl_dotplot(data, features, group_by, groups = c("brEC","unEC",'liEC'))
devtools::load_all(".")
pl_stackedViolinPlot(data, features, group_by)
devtools::load_all(".")
pl_averageHeatmap(data, features, group_by)
devtools::load_all(".")
devtools::load_all(".")
pl_averageHeatmap(data, features, group_by)
pl_averageHeatmap(data, features, group_by)
devtools::load_all(".")
pl_averageHeatmap(data, features, group_by)
devtools::load_all(".")
pl_averageHeatmap(data, features, group_by)
knitr::kable(table(ec_used@meta.data$Cluster))
knitr::kable(table(ec_used@meta.data$Cluster, ec_used@meta.data$Batch))
pander::pandoc.table(table(ec_used@meta.data$Cluster, ec_used@meta.data$Batch))
knitr::kable(table(ec_used@meta.data$Cluster, ec_used@meta.data$Batch))
knitr::kable
.
879*9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999*
/'00  7...............................................
knitr::kable(ec_used@meta.data[1:5,])
knitr::kable(ec_used@meta.data[1:5,1:10])
ec_used@meta.data[1:5,1:10]
pander::pandoc.table(ec_used@meta.data[1:5,1:5])
devtools::load_all(".")
expect_error(pl_averageHeatmap(data, features, group_by, groups = c("brEC","unEC",'liEC')))
expect_error(pl_averageHeatmap(data, features, group_by, groups = c("brEC","unEC",'liEC'), show_rownames = T))
test_that("pl_averageHeatmap", {
expect_error(pl_averageHeatmap(data, features, group_by, groups = c("brEC","unEC",'liEC'), show_rownames = T))
})
test_that("pl_averageHeatmap", {
expect_error(pl_averageHeatmap(data, features, group_by, groups = c("brEC","unEC",'liEC'), show_rownames = T), NA)
})
expect_error(pl_averageHeatmap(data, features, group_by, groups = c("brEC","unEC",'liEC'), show_rownames = T), NA)
tableHeatmap(ec_used@meta.data[1:5, 1:5])
devtools::load_all(".")
tableHeatmap(ec_used@meta.data[1:5, 1:5])
pl_tableHeatmap(ec_used@meta.data[1:5, 1:5])
print(load("./testdata.Rdata"))
print(load("./tests/testthat/testdata.Rdata"))
meta_data <- ec_used@meta.data
save(ec_used, data, meta_data, features, group_by, ec_cluster_color, file = "tests/testthat/testdata.Rdata")
expect_error(pl_tableHeatmap(table(meta_data$Cluster, meta_data$Batch)), NA)
pl_tableHeatmap(table(meta_data$Cluster, meta_data$Batch))
p <- ggplot(ggTab, mapping = aes_(x = as.name(xx), y = as.name(yy))) +
geom_tile(mapping = aes(fill = log(value+1)
#, height = sqrt((value+1)/max(value)), width = sqrt((value+1)/max(value))
),
color = "grey",
show.legend = T) +
#geom_tile(fill = NA, color = "grey") +
labs(title = title, x = xlab, y = ylab) +
geom_text(mapping = aes(label = value),
data = subset(ggTab, !is.na(ggTab$value)),
color = ifelse(ggTab$value[!is.na(ggTab$value)] >= min, "black", "grey")) +
scale_fill_gradientn(colours = colours, na.value = "white") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_blank(),
panel.border = element_rect(linetype = 1, color = "black", fill = NA))
colorRampPalette(c("grey", "red"))
colorRampPalette(c("grey", "red"))(5)
colorRamp(c("grey", "red"))(5)
colorRamp(c("grey", "red"))
colorRamp(c("grey", "red"))(5)
colorRamp(c("grey", "red"))(2)
colorRampPalette(c("grey", "red"))(2)
devtools::load_all(".")
library(convgene)
pl_averageHeatmap()
use_package("RColorBrewer")
use_package(pheatmap)
use_package("pheatmap")
use_package("stringr", reshape2)
use_package("stringr", "reshape2")
use_package("stringr")
use_package("reshape2")
devtools::load_all(".")
library(convgene)
RColorBrewer::brewer.pal.info
devtools::load_all(".")
tl_crossTableEnrichment(table(meta_data$Cluster, meta_data$Batch))
tl_crossTableEnrichment(table(meta_data$Cluster, meta_data$Batch))
devtools::load_all(".")
tl_crossTableEnrichment(table(meta_data$Cluster, meta_data$Batch))
tl_crossTableEnrichment(table(meta_data$Cluster, meta_data$Batch))
library(convgene)
devtools::load_all(".")
library(convgene)
tl_crossTableEnrichment(table(meta_data$Cluster, meta_data$Batch))
library(convgene)
tl_crossTableEnrichment(table(meta_data$Cluster, meta_data$Batch))
library(convgene)
tl_crossTableEnrichment(table(meta_data$Cluster, meta_data$Batch))
tl_crossTableEnrichment(table(meta_data$Cluster, meta_data$Batch))
library(convgene)
tl_crossTableEnrichment(table(meta_data$Cluster, meta_data$Batch))
devtools::load_all(".")
print(load("./testdata.Rdata"))
print(load("tests/testthat/testdata.Rdata"))
expect_error(pl_crossTableHeatmap(table(meta_data$Cluster, meta_data$Batch)), NA)
save(data, meta_data, features,group_by, ec_cluster_color, file = "tests/testthat/testdata.Rdata")
expect_error(pl_crossTableHeatmap(table(meta_data$Cluster, meta_data$Batch)), NA)
library(convgene)
expect_error(pl_crossTableHeatmap(table(meta_data$Cluster, meta_data$Batch)), NA)
library(convgene)
expect_error(pl_crossTableHeatmap(table(meta_data$Cluster, meta_data$Batch)), NA)
expect_error(tl_crossTableEnrichment(table(meta_data$Cluster, meta_data$Batch)), NA)
expect_error(pl_averageHeatmap(data, features, group_by, groups = c("brEC","unEC",'liEC'), show_rownames = T), NA)
expect_error(pl_dotplot(data, features, group_by, groups = c("brEC","unEC",'liEC')), NA)
expect_error(pl_averageHeatmap(data, features, group_by, groups = c("brEC","unEC",'liEC'), show_rownames = T), NA)
test_file("tests/testthat/test-pl.R")
test_file("tests/testthat/test-pl.R")
devtools::load_all(".")
test_file("tests/testthat/test-pl.R")
expect_error(pl_vioboxplot(cbind(meta_data, t(data[features,])), "Cluster", "PECAM1"), NA)
library(convgene)
test_file("tests/testthat/test-pl.R")
library(convgene)
library(convgene)
test_file("tests/testthat/test-pl.R")
test_file("tests/testthat/test-pl.R")
test_file("tests/testthat/test-pl.R")
library(convgene)
library(convgene)
test_file("tests/testthat/test-pl.R")
test_file("tests/testthat/test-pl.R")
test_file("tests/testthat/test-pl.R")
library(convgene)
test_file("tests/testthat/test-pl.R")
library(convgene)
library(convgene)
devtools::load_all(".")
expect_error(pl_stackedViolinPlot(data, features, group_by, groups = c("brEC","unEC",'liEC')), NA)
pl_stackedViolinPlot(data, features, group_by, groups = c("brEC","unEC",'liEC'))
factor(c("A", "B", "A"), levels = c("A","B", "C"))
unique(factor(c("A", "B", "A"), levels = c("A","B", "C")))
devtools::load_all(".")
write_genesToMeatascape(1:5, c(1,1,1,2,2), txt_file = "clipboard")
devtools::load_all(".")
write_genesToMeatascape(1:5, c(1,1,1,2,2), txt_file = "clipboard")
library(convgene)
pl_vioboxplot(cbind(meta_data, t(data[features,])), "Cluster", "PECAM1")
library(convgene)
use_version()
library(convgene)
expect_error(write_genesToMeatascape(rep("GeneA", 10), rep(c("A", "B"), each = 5)), NA)
library(convgene)
devtools::load_all(".")
library(convgene)
library(convgene)
library(convgene)
matrix(nrow =10, ncol = 0)
library(convgene)
library(convgene)
library(convgene)
library(convgene)
library(convgene)
library(convgene)
RColorBrewer::display.brewer.all()
library(convgene)
library(convgene)
library(convgene)
library(Seurat)
pl_rastrFeaturePlot <- function(object, features, coord_fixed_ratio = 1, ncol = NULL, align = c("hv"),
cols = c("grey", "yellow", "red"), pt.size = 1, order = T,
reduction = "umap", dims = c(1,2)){
dimension <- Embeddings(object, reduction = reduction)[,dims]
xy <- colnames(dimension)
ggData <- cbind(dimension, FetchData(object, vars = features)) %>%
as.data.frame()
cowplot::plot_grid(
plotlist = lapply(features, function(x){
ggplot(data = if(order) ggData %>% arrange(x) else ggData ,
mapping = aes_string(x = xy[1], y = xy[2], color = x)) +
ggrastr::rasterise(
geom_point(size = pt.size),
dpi = 300) +
scale_color_gradientn(colours = cols) +
coord_fixed(ratio = coord_fixed_ratio) +
theme_classic() +
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_blank(),
panel.border = element_rect(fill = NA, color = "black"))
}),ncol = ncol, align = align)
}
library(convgene)
library(convgene)
library(convgene)
library(crosslinks)
columnCross2)
columnCross2
columnCross2()
columnCross2(columns = columns)
columnCross2(edges, nodes, columns,
height = 1, flank_mult = rep(0.1, length(columns)), segment_shrink = 0.1,
linetype = "type", line_alpha = "alpha", line_color = "color", line_size = "size" ,
pt_alpha = "alpha", pt_color = "color", pt_fill = "color",
pt_shape = "shape", pt_size = "size", pt_stroke = 1)''
columnCross2(edges, nodes, columns,
height = 1, flank_mult = rep(0.1, length(columns)), segment_shrink = 0.1,
linetype = "type", line_alpha = "alpha", line_color = "color", line_size = "size" ,
pt_alpha = "alpha", pt_color = "color", pt_fill = "color",
pt_shape = "shape", pt_size = "size", pt_stroke = 1)
columnCross2(edges, nodes, columns,
height = 1, flank_mult = rep(0.1, length(columns)), segment_shrink = 0.1,
linetype = "type", line_alpha = "alpha", line_color = "color", line_size = "size" ,
pt_alpha = "alpha", pt_color = "color", pt_fill = "color",
pt_shape = "shape", pt_size = "size", pt_stroke = 2)
columnCross2(edges, nodes, columns,
height = 1, flank_mult = rep(0.1, length(columns)), segment_shrink = 0.1,
linetype = "type", line_alpha = "alpha", line_color = "color", line_size = "size" ,
pt_alpha = "alpha", pt_color = "color", pt_fill = "color",
pt_shape = "shape", pt_size = "size", pt_stroke = 0.5)
columnCross2(edges, nodes, columns,
height = 1, flank_mult = rep(0.1, length(columns)), segment_shrink = 0.1,
linetype = "type", line_alpha = "alpha", line_color = "color", line_size = "size" ,
pt_alpha = "alpha", pt_color = "color", pt_fill = "color",
pt_shape = 21, pt_size = "size", pt_stroke = 0.5)
columnCross2(edges, nodes, columns,
height = 1, flank_mult = rep(0.1, length(columns)), segment_shrink = 0.1,
linetype = "type", line_alpha = "alpha", line_color = "color", line_size = "size" ,
pt_alpha = "alpha", pt_color = "color", pt_fill = "color",
pt_shape = 21, pt_size = "size", pt_stroke = 2)
columnCross2(edges, nodes, columns,
height = 1, flank_mult = rep(0.1, length(columns)), segment_shrink = 0.1,
linetype = "type", line_alpha = "alpha", line_color = "color", line_size = "size" ,
pt_alpha = "alpha", pt_color = "black", pt_fill = "color",
pt_shape = 21, pt_size = "size", pt_stroke = 2)
columnCross2(edges, nodes, columns,
height = 1, flank_mult = rep(0.1, length(columns)), segment_shrink = 0.1,
linetype = "type", line_alpha = "alpha", line_color = "color", line_size = "size" ,
pt_alpha = "alpha", pt_color = "black", pt_fill = "color",
pt_shape = 21, pt_size = "size", pt_stroke = 10)
columnCross2(edges, nodes, columns,
height = 1, flank_mult = rep(0.1, length(columns)), segment_shrink = 0.1,
linetype = "type", line_alpha = "alpha", line_color = "color", line_size = "size" ,
pt_alpha = "alpha", pt_color = "black", pt_fill = "color",
pt_shape = 21, pt_size = "size", pt_stroke = 0.1)
columns
nodes
library(convgene)
library(convgene)
library(convgene)
library(convgene)
library(convgene)
library(convgene)
library(usethis)
library(devtools)
inst("grid")
system.file("rmd", "hashtag_demux.Rmd", package = "convgene")
library(convgene)
library(convgene)
library(convgene)
getwd()
library(convgene)
system.file("rmd", "mcc_MT_genes.csv", package = "convgene")
tmp <- read.csv(file = "inst/rmd/mcc_MT_genes.csv")
View(tmp)
tmp$gene_id
knitr::opts_chunk$set(echo = TRUE,
message=T, warning=T,
cache = F, cache.lazy = F,
dev = "png", dpi = 100, fig.width = 10, fig.height = 10)
options(stringsAsFactors = F)
tmp <- read.csv(file = "inst/rmd/mcc_MT_genes.csv")
View(tmp)
tmp$gene_id
library(convgene)
library(convgene)
library(convgene)
