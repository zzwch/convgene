stopifnot(!clipr::clipr_available())
assertError(sqrt("abc"))
tools::  assertError(sqrt("abc"))
tools::assertError(sqrt("abc"))
try( assertCondition(sqrt(2), "warning") )
library(tools)
try( assertCondition(sqrt(2), "warning") )
assertCondition(sqrt("abc"), "error")
assertCondition(matrix(1:8, 4,3), "error","warning") # OK
library(devtools)
use_package("stringr")
x <- c("geneA geneb", "gene2 gene3")
geneList <- stringr::str_split(
stringr::str_squish(
stringr::str_replace_all(
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
geneList
x <- "geneA geneb"
names(x)
geneList <- stringr::str_split(
stringr::str_squish(
stringr::str_replace_all(
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
x <- c("geneA geneB", "genea geneB")
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
geneList <- unlist(geneList)
anyDuplicated(geneList)
x <- c("gene A gene", "gene B gene")
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
lapply(geneList, anyDuplicated)
any(lapply(geneList, anyDuplicated))
do.call(anay, lapply(geneList, anyDuplicated)))
do.call(anay, lapply(geneList, anyDuplicated))
do.call(any, lapply(geneList, anyDuplicated))
do.call(~which(.x>0), lapply(geneList, anyDuplicated))
do.call(function(x) which(x>0), lapply(geneList, anyDuplicated))
do.call(function(x) which(x>0), sapply(geneList, anyDuplicated))
do.call(function(x) which(x>0), list(sapply(geneList, anyDuplicated)))
print(geneList)
str_to_gene <- function(x, to_list = F, print = T){
if(missing(x)) {
if(clipr::clipr_available()){
x <- clipr::read_clip()
}else{
stop("system clipboard is not available")
}
}
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
if(!to_list) {
geneList <- unlist(geneList)
if(anyDuplicated(geneList)){
warning("returned gene list is redundant! you may use unique() to deduplicate it.")
}
}else{
dup_ind <- which(sapply(geneList, anyDuplicated) > 0)
warning(stringr::str_glue("There is/are duplicated genes in list of index {paste(dup_ind, collapse = ', ')}"))
}
if(print) print(geneList)
return(geneList)
}
str_to_gene("Tmbf adf, dfj 'fdaf'")
str_to_gene <- function(x, to_clipboard = F, as_list = F, print = T){
if(missing(x)) {
if(clipr::clipr_available()){
x <- clipr::read_clip()
}else{
stop("system clipboard is not available")
}
}
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
if(!as_list) {
geneList <- unlist(geneList)
if(anyDuplicated(geneList)){
warning("returned gene list is redundant! you may use unique() to deduplicate it.")
}
}else{
dup_ind <- which(sapply(geneList, anyDuplicated) > 0)
warning(stringr::str_glue("There is/are duplicated genes in list of index {paste(dup_ind, collapse = ', ')}"))
}
if(print) print(geneList)
if(to_clipboard) clipr::write_clip(geneList) else return(geneList)
}
x
str_to_gene()
str_to_gene(print = F)
str_to_gene(print = F, to_clipboard = T)
str_to_gene(print = F, to_clipboard = T, as_list = T)
str_to_gene <- function(x, to_clipboard = F, as_list = F, print = T){
if(missing(x)) {
if(clipr::clipr_available()){
x <- clipr::read_clip()
}else{
stop("system clipboard is not available")
}
}
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
if(!as_list) {
geneList <- unlist(geneList)
if(anyDuplicated(geneList)){
message("returned gene list is redundant! you may use unique() to deduplicate it.")
}
}else{
dup_ind <- which(sapply(geneList, anyDuplicated) > 0)
message(stringr::str_glue("There is/are duplicated genes in list of index {paste(dup_ind, collapse = ', ')}"))
}
if(print) print(geneList)
if(to_clipboard) clipr::write_clip(geneList) else return(geneList)
}
str_to_gene(print = F, to_clipboard = T, as_list = T)
dup_ind <- which(sapply(geneList, anyDuplicated) > 0)
message(stringr::str_glue("There are duplicated genes in list of index {paste(dup_ind, collapse = ', ')}"))
str_to_gene <- function(x, to_clipboard = F, as_list = F, print = T){
if(missing(x)) {
if(clipr::clipr_available()){
x <- clipr::read_clip()
}else{
stop("system clipboard is not available")
}
}
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
if(!as_list) {
geneList <- unlist(geneList)
if(anyDuplicated(geneList)){
message("returned gene list is redundant! you may use unique() to deduplicate it.")
}
}else{
dup_ind <- which(sapply(geneList, anyDuplicated) > 0)
message(stringr::str_glue("There are duplicated genes in list of index {paste(dup_ind, collapse = ', ')}"))
}
if(print) print(geneList)
if(to_clipboard) clipr::write_clip(geneList) else return(geneList)
}
str_to_gene(print = F, to_clipboard = T, as_list = T)
message(stringr::str_interp("There are duplicated genes in list of index ${paste(dup_ind, collapse = ', ')}"))
str_to_gene <- function(x, to_clipboard = F, as_list = F, print = T){
if(missing(x)) {
if(clipr::clipr_available()){
x <- clipr::read_clip()
}else{
stop("system clipboard is not available")
}
}
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
if(!as_list) {
geneList <- unlist(geneList)
if(anyDuplicated(geneList)){
message("returned gene list is redundant! you may use unique() to deduplicate it.")
}
}else{
dup_ind <- which(sapply(geneList, anyDuplicated) > 0)
message(stringr::str_interp("There are duplicated genes in list of index ${paste(dup_ind, collapse = ', ')}"))
}
if(print) print(geneList)
if(to_clipboard) clipr::write_clip(geneList) else return(geneList)
}
str_to_gene(print = F, to_clipboard = T, as_list = T)
str_to_gene <- function(x, to_clipboard = F, as_list = F, print = T){
if(missing(x)) {
if(clipr::clipr_available()){
x <- clipr::read_clip()
}else{
stop("system clipboard is not available")
}
}
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
if(!as_list) {
geneList <- unlist(geneList)
if(anyDuplicated(geneList)){
message("returned gene list is redundant! you may use unique() to deduplicate it.")
}
}else{
dup_ind <- paste(which(sapply(geneList, anyDuplicated) > 0), collapse = ', ')
message(stringr::str_interp("There are duplicated genes in list of index ${dup_ind}"))
}
if(print) print(geneList)
if(to_clipboard) clipr::write_clip(geneList) else return(geneList)
}
str_to_gene(print = F, to_clipboard = T, as_list = T)
x
message(stringr::str_glue("There are duplicated genes in list of index {dup_ind}"))
dup_ind <- paste(which(sapply(geneList, anyDuplicated) > 0), collapse = ', ')
message(stringr::str_glue("There are duplicated genes in list of index {dup_ind}"))
str_to_gene <- function(x, to_clipboard = F, as_list = F, print = T){
if(missing(x)) {
if(clipr::clipr_available()){
x <- clipr::read_clip()
}else{
stop("system clipboard is not available")
}
}
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
if(!as_list) {
geneList <- unlist(geneList)
if(anyDuplicated(geneList)){
message("returned gene list is redundant! you may use unique() to deduplicate it.")
}
}else{
dup_ind <- paste(which(sapply(geneList, anyDuplicated) > 0), collapse = ', ')
message(stringr::str_glue("There are duplicated genes in list of index {dup_ind}"))
}
if(print) print(geneList)
if(to_clipboard) clipr::write_clip(geneList) else return(geneList)
}
message(stringr::str_glue("There are duplicated genes in list of index {dup_ind}"))
str_to_gene(print = F, to_clipboard = T, as_list = T)
message(paste0("There are duplicated genes in list of index ", dup_ind))
str_to_gene <- function(x, to_clipboard = F, as_list = F, print = T){
if(missing(x)) {
if(clipr::clipr_available()){
x <- clipr::read_clip()
}else{
stop("system clipboard is not available")
}
}
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
if(!as_list) {
geneList <- unlist(geneList)
if(anyDuplicated(geneList)){
message("returned gene list is redundant! you may use unique() to deduplicate it.")
}
}else{
dup_ind <- paste(which(sapply(geneList, anyDuplicated) > 0), collapse = ', ')
message(paste0("There are duplicated genes in list of index ", dup_ind))
}
if(print) print(geneList)
if(to_clipboard) clipr::write_clip(geneList) else return(geneList)
}
str_to_gene(print = F, to_clipboard = T, as_list = T)
str_to_gene(print = F, to_clipboard = T, as_list = F)
str_to_gene(print = F, to_clipboard = T, as_list = T)
x
str_to_gene(x = x,print = F, to_clipboard = T, as_list = T)
str_to_gene <- function(x, to_clipboard = F, as_list = F, print = T){
if(missing(x)) {
if(clipr::clipr_available()){
x <- clipr::read_clip()
}else{
stop("system clipboard is not available")
}
}
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
if(!as_list) {
geneList <- unlist(geneList)
if(anyDuplicated(geneList)){
message("returned gene list is redundant! you may use unique() to deduplicate it.")
}
}else{
dup_ind <- paste(which(sapply(geneList, anyDuplicated) > 0), collapse = ', ')
message(stringr::str_glue("There are duplicated genes in list of index {dup_ind}"))
}
if(print) print(geneList)
if(to_clipboard) clipr::write_clip(geneList) else return(geneList)
}
str_to_gene(x = x,print = F, to_clipboard = T, as_list = T)
c("gene", "A", "gene")
c("gene", "B", "gene")
clipr::read_clip()
str_to_gene(print = F, to_clipboard = T, as_list = T)
c("c", "gene", "A", "gene")
c("c", "gene", "B", "gene")
x <- "geneA geneB"
str_to_gene(print = F, to_clipboard = T, as_list = T, x = x)
c("geneA", "geneB")
stringr::str_flatten(c("geneA", "geneB"))
stringr::str_flatten(x)
x
stringr::str_flatten(list(c("A", "B"), c("C", "D")))
library(stringr)
str_flatten(c("Age", "gd"))
str_flatten(list(c("Age", "gd")))
unlist(list("A", list("B", list("C"))))
str_to_char <- function(x, unique = T, sort = T, ...){
chars <- stringr::str_split(
stringr::str_flatten(unlist(x)),
"", simplify = F)[[1]]
if(unique) chars <- unique(chars)
if(sort) chars <- sort(chars, ...)
return(chars)
}
str_to_char("adfa")
str_to_char("adfa", F,F)
x <- c("a", "b")
chars <- stringr::str_split(
stringr::str_flatten(unlist(x)),
"", simplify = F)[[1]]
library(stringr)
str_flatten(c("a", "b"))
str_flatten(list(c("a", "b")))
str_to_gene(x = list(Hematopoietic = c("Runx1 Gata4 GATA1", "Gypa Gype Ptprc"), Endothelial = c("Pecam1 Cdh5")), as_list = T)
#' @param to_clipboard If `False` return a charactor vector of gene symbols (default), if `TRUE` return value to clipboard
#' @param as_list If `FALSE` (default) return value is a vector. If `TRUE` reutrn value is structured in list, this is useful when `to_clipboard=T` so that you can paste the return (symbols with quoted) to python.
#' @param print print the return or not. (default: FALSE)
#'
#' @return A charactor vector of gene symbols or A list of vectors (with names if x named) in case of as_list=T
#' @export
#'
#' @examples
#' str_to_gene(x = "Runx1, Gata4 Gata1;, Dll4, Nkx2-5, NOTAGENE") # note: the function does not check validity of gene symbols
#' str_to_gene(x = list(Hematopoietic = c("Runx1 Gata4 GATA1", "Gypa Gype Ptprc"), Endothelial = c("Pecam1 Cdh5")), as_list = T)
str_to_gene <- function(x, to_clipboard = F, as_list = F, print = F){
if(missing(x)) {
if(clipr::clipr_available()){
x <- clipr::read_clip()
}else{
stop("system clipboard is not available")
}
}
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
if(!as_list) {
geneList <- unlist(geneList)
if(anyDuplicated(geneList)){
message("returned gene list is redundant! you may use unique() to deduplicate it.")
}
}else{
dup_ind <- paste(which(sapply(geneList, anyDuplicated) > 0), collapse = ', ')
message(stringr::str_glue("There are duplicated genes in list of index {dup_ind}"))
}
if(print) print(geneList)
if(to_clipboard) clipr::write_clip(geneList) else return(geneList)
}
str_to_gene(x = list(Hematopoietic = c("Runx1 Gata4 GATA1", "Gypa Gype Ptprc"), Endothelial = c("Pecam1 Cdh5")), as_list = T)
str_to_gene(x = c(Hematopoietic ="Runx1 Gata4 GATA1", Ery = "Gypa Gype Ptprc", Endothelial = "Pecam1 Cdh5"), as_list = T)
which(c(T))
which(c(F, F))
if(which(c(F, F))) print("x")
#' @param to_clipboard If `False` return a charactor vector of gene symbols (default), if `TRUE` return value to clipboard
#' @param as_list If `FALSE` (default) return value is a vector. If `TRUE` reutrn value is structured in list, this is useful when `to_clipboard=T` so that you can paste the return (symbols with quoted) to python.
#' @param print print the return or not. (default: FALSE)
#'
#' @return A charactor vector of gene symbols or A list of vectors (with names if x named) in case of as_list=T
#' @export
#'
#' @examples
#' str_to_gene(x = "Runx1, Gata4 Gata1;, Dll4, Nkx2-5, NOTAGENE") # note: the function does not check validity of gene symbols
#' str_to_gene(x = c(Hematopoietic ="Runx1 Gata4 GATA1", Ery = "Gypa Gype Ptprc", Endothelial = "Pecam1 Cdh5"), as_list = T)
str_to_gene <- function(x, to_clipboard = F, as_list = F, print = F){
if(missing(x)) {
if(clipr::clipr_available()){
x <- clipr::read_clip()
}else{
stop("system clipboard is not available")
}
}
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, "[^a-zA-Z0-9\\-\\.]", " ")
), " ")
names(geneList) <- names(x) # set names if available
if(!as_list) {
geneList <- unlist(geneList)
if(anyDuplicated(geneList)){
message("returned gene list is redundant! you may use unique() to deduplicate it.")
}
}else{
dup_ind <- which(sapply(geneList, anyDuplicated) > 0)
if(length(dup_ind)>0){
dup_ind <- paste(dup_ind, collapse = ', ')
message(stringr::str_glue("There are duplicated genes in list of index {dup_ind}"))
}
}
if(print) print(geneList)
if(to_clipboard) clipr::write_clip(geneList) else return(geneList)
}
str_to_gene(x = c(Hematopoietic ="Runx1 Gata4 GATA1", Ery = "Gypa Gype Ptprc", Endothelial = "Pecam1 Cdh5"), as_list = T)
str_to_gene(x = "Runx1, Gata4 Gata1;, Dll4, Nkx2-5, NOTAGENE")
str_to_gene(x = c("Runx1, Gata4 Gata1;, Dll4, Nkx2-5, NOTAGENE", "aaa"))
#' @param unique If `TRUE` chars should be uniqued, otherwise as it is.
#' @param sort If `TRUE` chars should be sorted by alphabetic, otherwise as it is.
#' @param ... more parameters to be used in sort(). such as order decreasing = T if you like.
#'
#' @return a vector of chars
#' @export
#'
#' @examples
#' str_to_char(x = c("Here it is"))
#' sapply(c("Yes", "or", "Not") str_to_char)
str_to_char <- function(x, unique = T, sort = T, ...){
chars <- stringr::str_split(
stringr::str_flatten(unlist(x)),
"", simplify = F)[[1]]
if(unique) chars <- unique(chars)
if(sort) chars <- sort(chars, ...)
return(chars)
}
sapply(c("Yes", "or", "Not") str_to_char)
sapply(c("Yes", "or", "Not"), str_to_char)
sapply(c("Yes", "or", "Not"), str_to_char, sort = F, unique = F)
str_to_char(x = c("Here it is"))
str_to_char(x = c("Yes", "or", "Not"), unique = F, sort = F)
str_to_char(x = c("Here it is"))
str_to_char(x = c("Here it is")， sosort = F)
str_to_char(x = c("Here it is"), sort = F)
str_to_char(x = c("Here it is"), sort = F, unique = F)
str_to_gene(x = "Runx1, Gata4 Gata1;, Dll4, Nkx2-5, NOTAGENE", to_clipboard = T)
str_to_gene(x = "Runx1, Gata4 Gata1;, Dll4, Nkx2-5, NOTAGENE", to_clipboard = T, as_list = T)
#'
#' @return A charactor vector of gene symbols or A list of vectors (with names if x named) in case of as_list=T
#' @export
#'
#' @examples
#' # you can copy some text from anywhere (a research article for example) and then str_to_gene() will help to parse it into gene vector.
#' str_to_gene()
#' # custom string of genes
#' str_to_gene(x = "Runx1, Gata4 Gata1;, Dll4, Nkx2-5, NOTAGENE") # note: the function does not check validity of gene symbols
#' str_to_gene(x = c(Hematopoietic ="Runx1 Gata4 GATA1", Ery = "Gypa Gype Ptprc", Endothelial = "Pecam1 Cdh5"), as_list = T)
str_to_gene <- function(x, to_clipboard = F, as_list = F, print = F, REGEX = "[^a-zA-Z0-9\\-\\.]"){
if(missing(x)) {
if(clipr::clipr_available()){
x <- clipr::read_clip()
}else{
stop("system clipboard is not available")
}
}
geneList <-
stringr::str_split( # split by space
stringr::str_squish( # squish multiple sapces into one space
stringr::str_replace_all( # replace all non-symbol-charactor with a space
x, REGEX, " ")
), " ")
names(geneList) <- names(x) # set names if available
if(!as_list) {
geneList <- unlist(geneList)
if(anyDuplicated(geneList)){
message("returned gene list is redundant! you may use unique() to deduplicate it.")
}
}else{
dup_ind <- which(sapply(geneList, anyDuplicated) > 0)
if(length(dup_ind)>0){
dup_ind <- paste(dup_ind, collapse = ', ')
message(stringr::str_glue("There are duplicated genes in list of index {dup_ind}"))
}
}
if(print) print(geneList)
if(to_clipboard) suppressWarnings(clipr::write_clip(geneList)) else return(geneList)
}
str_to_gene(x = "Runx1, Gata4 Gata1;, Dll4, Nkx2-5, NOTAGENE", to_clipboard = T, as_list = T)
library(ggplot2)
