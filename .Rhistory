keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds <- DESeq(dds)
dds <- DESeqDataSetFromMatrix(countData = count,
colData = annot,
design= ~ celltype1)
dds <- DESeqDataSetFromMatrix(countData = count,
colData = annot,
design= ~ celltype2)
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds <- DESeq(dds)
vsd <- vst(dds, blind = F)
resultsNames(dds) # lists the coefficients
# res <- results(dds, name = "group_heter_vs_ctrl")
# res <- res[order(res$pvalue), ]
# or to shrink log fold changes association with condition:
reslfc <- lfcShrink(dds,  coef = "celltype2_pos_vs_neg", type="apeglm")
reslfc <- reslfc[order(reslfc$pvalue), ]
mcols(reslfc)
reslfc_sig <- reslfc %>% as.data.frame() %>%
rownames_to_column("gene") %>%
filter(abs(log2FoldChange) > log2(1.5) & padj < 0.05) %>%
mutate(comparison = ifelse(log2FoldChange > 0, "higher in pos compared to neg", "lower in pos compared to neg"))
View(reslfc_sig)
select_genes <- reslfc_sig$gene
#########
pheatmap(assay(vsd)[select_genes,] %>% t %>% scale %>% t %>% Seurat::MinMax(-2, 2),
#scale = "row",
clustering_method = "ward.D",
cluster_rows=T,
show_rownames=FALSE,
cluster_cols=T,
border_color = NA,
annotation_col= annot,
annotation_row = reslfc_sig %>% dplyr::select("gene", "comparison") %>% column_to_rownames("gene"))
reslfc_sig %>%
WriteXLS::WriteXLS(ExcelFileName = "celltype2.pos_vs_neg.lfc.xls", AdjWidth = T, BoldHeaderRow = T)
save(dds, vsd, reslfc, reslfc_sig, file = "dds2.Rdata")
#######
#sampleDists <- dist(t(assay(vsd)[select_genes,]))
sampleDists <- cor(assay(vsd)[select_genes,])
sampleDistMatrix <- as.matrix(sampleDists)
pheatmap(sampleDistMatrix, #scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
clustering_method = "ward.D",
#clustering_distance_rows=sampleDists,
#clustering_distance_cols=sampleDists,
col=colorRampPalette(brewer.pal(9, "Spectral") %>% rev)(15),
treeheight_row = 25, treeheight_col = 25)
pheatmap(sampleDistMatrix, #scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
clustering_method = "ward.D",
#clustering_distance_rows=sampleDists,
#clustering_distance_cols=sampleDists,
col=colorRampPalette(RColorBrewer::brewer.pal(9, "Spectral") %>% rev)(15),
treeheight_row = 25, treeheight_col = 25)
print(load("dds.Rdata"))
select_genes <- reslfc_sig$gene
#########
pheatmap(assay(vsd)[select_genes,] %>% t %>% scale %>% t %>% Seurat::MinMax(-2, 2),
#scale = "row",
clustering_method = "ward.D",
cluster_rows=T,
show_rownames=FALSE,
cluster_cols=T,
border_color = NA,
annotation_col= annot,
annotation_row = reslfc_sig %>% dplyr::select("gene", "comparison") %>% column_to_rownames("gene"))
#######
#sampleDists <- dist(t(assay(vsd)[select_genes,]))
sampleDists <- cor(assay(vsd)[select_genes,])
sampleDistMatrix <- as.matrix(sampleDists)
pheatmap(sampleDistMatrix, #scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
clustering_method = "ward.D",
#clustering_distance_rows=sampleDists,
#clustering_distance_cols=sampleDists,
col=colorRampPalette(RColorBrewer::brewer.pal(9, "Spectral") %>% rev)(15),
treeheight_row = 25, treeheight_col = 25)
plotPCA(vsd[select_genes,], intgroup=c("group"), )
plotPCA(vsd[select_genes,], intgroup=c("celltype"), )
plotPCA(vsd[select_genes,], intgroup=c("celltype2"), )
print(load("dds2.Rdata"))
select_genes <- reslfc_sig$gene
#########
pheatmap(assay(vsd)[select_genes,] %>% t %>% scale %>% t %>% Seurat::MinMax(-2, 2),
#scale = "row",
clustering_method = "ward.D",
cluster_rows=T,
show_rownames=FALSE,
cluster_cols=T,
border_color = NA,
annotation_col= annot,
annotation_row = reslfc_sig %>% dplyr::select("gene", "comparison") %>% column_to_rownames("gene"))
#######
#sampleDists <- dist(t(assay(vsd)[select_genes,]))
sampleDists <- cor(assay(vsd)[select_genes,])
sampleDistMatrix <- as.matrix(sampleDists)
pheatmap(sampleDistMatrix, #scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
clustering_method = "ward.D",
#clustering_distance_rows=sampleDists,
#clustering_distance_cols=sampleDists,
col=colorRampPalette(RColorBrewer::brewer.pal(9, "Spectral") %>% rev)(15),
treeheight_row = 25, treeheight_col = 25)
plotPCA(vsd[select_genes,], intgroup=c("celltype2"), )
select_genes <- apply(assay(vsd), 1, var)
select_genes <- apply(assay(vsd), 1, var) %>% sort()
select_genes <- apply(assay(vsd), 1, var) %>% sort(decreasing = T)
select_genes <- apply(assay(vsd), 1, var) %>% sort(decreasing = T)[1:1000]
select_genes <- apply(assay(vsd), 1, var) %>% sort(decreasing = T) %>% .[1:1000]
select_genes <- apply(assay(vsd), 1, var) %>% sort(decreasing = T) %>% .[1:1000] %>% names
#########
pheatmap(assay(vsd)[select_genes,] %>% t %>% scale %>% t %>% Seurat::MinMax(-2, 2),
#scale = "row",
clustering_method = "ward.D",
cluster_rows=T,
show_rownames=FALSE,
cluster_cols=T,
border_color = NA,
annotation_col= annot,
annotation_row = reslfc_sig %>% dplyr::select("gene", "comparison") %>% column_to_rownames("gene"))
#######
#sampleDists <- dist(t(assay(vsd)[select_genes,]))
sampleDists <- cor(assay(vsd)[select_genes,])
sampleDistMatrix <- as.matrix(sampleDists)
pheatmap(sampleDistMatrix, #scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
clustering_method = "ward.D",
#clustering_distance_rows=sampleDists,
#clustering_distance_cols=sampleDists,
col=colorRampPalette(RColorBrewer::brewer.pal(9, "Spectral") %>% rev)(15),
treeheight_row = 25, treeheight_col = 25)
plotPCA(vsd[select_genes,], intgroup=c("celltype2"), )
plotPCA(vsd[select_genes,], intgroup=c("celltype"), )
print(load("dds.Rdata"))
vsd <- vst(dds, blind = F)
select_genes <- reslfc_sig$gene
#########
pheatmap(assay(vsd)[select_genes,] %>% t %>% scale %>% t %>% Seurat::MinMax(-2, 2),
#scale = "row",
clustering_method = "ward.D",
cluster_rows=T,
show_rownames=FALSE,
cluster_cols=T,
border_color = NA,
annotation_col= annot,
annotation_row = reslfc_sig %>% dplyr::select("gene", "comparison") %>% column_to_rownames("gene"))
select_genes <- apply(assay(vsd), 1, function(x) sd(x)/mean(x)) %>% sort(decreasing = T) %>% .[1:1000] %>% names
#########
pheatmap(assay(vsd)[select_genes,] %>% t %>% scale %>% t %>% Seurat::MinMax(-2, 2),
#scale = "row",
clustering_method = "ward.D",
cluster_rows=T,
show_rownames=FALSE,
cluster_cols=T,
border_color = NA,
annotation_col= annot,
annotation_row = reslfc_sig %>% dplyr::select("gene", "comparison") %>% column_to_rownames("gene"))
#######
#sampleDists <- dist(t(assay(vsd)[select_genes,]))
sampleDists <- cor(assay(vsd)[select_genes,])
sampleDistMatrix <- as.matrix(sampleDists)
pheatmap(sampleDistMatrix, #scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
clustering_method = "ward.D",
#clustering_distance_rows=sampleDists,
#clustering_distance_cols=sampleDists,
col=colorRampPalette(RColorBrewer::brewer.pal(9, "Spectral") %>% rev)(15),
treeheight_row = 25, treeheight_col = 25)
pheatmap(sampleDistMatrix, scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
clustering_method = "ward.D",
#clustering_distance_rows=sampleDists,
#clustering_distance_cols=sampleDists,
col=colorRampPalette(RColorBrewer::brewer.pal(9, "Spectral") %>% rev)(15),
treeheight_row = 25, treeheight_col = 25)
pheatmap(sampleDistMatrix,# scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
clustering_method = "ward.D",
#clustering_distance_rows=sampleDists,
#clustering_distance_cols=sampleDists,
col=colorRampPalette(RColorBrewer::brewer.pal(9, "Spectral") %>% rev)(15),
treeheight_row = 25, treeheight_col = 25)
plotPCA(vsd[select_genes,], intgroup=c("celltype"), )
c2kegg <- read.gmt(gmtfile = "D:/Project_Ube2i/analysis210105/c2.cp.kegg.v6.1.symbols.gmt")
c2kegg <- clusterProfiler::read.gmt(gmtfile = "D:/Project_Ube2i/analysis210105/c2.cp.kegg.v6.1.symbols.gmt")
c2kegg %>% WriteXLS::WriteXLS(ExcelFileName = "c2.cp.kegg.v6.1.mouse.xls")
convgene::write_dataToJavaGSEA(assay(vsd), group_by = vsd$celltype, file_prefix = "celltype.gsea")
file.copy( "D:/Project_Ube2i/analysis210105/c2.cp.kegg.v6.1.symbols.gmt", to = "./")
convgene::write_dataToJavaGSEA(fpkm, group_by = vsd$celltype, file_prefix = "fpkm.gsea")
library(edgeR)
library(limma)
design(dds)
fit <- lmFit(log1p(fpkm), cbind(ctrl = 1, posVSneg = c(rep(0, 22), rep(1, 22))))
fit <- eBayes(fit, trend=TRUE)
expr <- fpkm[rowsum(fpkm > 0) > 10,]
expr <- fpkm[rowSums(fpkm > 0) > 10,]
fit <- lmFit(log1p(expr), cbind(ctrl = 1, posVSneg = c(rep(0, 22), rep(1, 22))))
fit <- eBayes(fit, trend=TRUE)
topTable(fit, coef=ncol(design))
tmp <- topTable(fit, coef=ncol(design))
View(tmp)
# Or, to give more weight to fold-changes in the gene ranking, one might use:
fit <- treat(fit, lfc=log2(1.2))
topTreat(fit, coef=ncol(design))
tmp <- topTable(fit, coef=ncol(design), p.value = 0.05)
fit <- eBayes(fit, trend=TRUE)
fit <- lmFit(log1p(expr), cbind(ctrl = 1, posVSneg = c(rep(0, 22), rep(1, 22))))
fit <- eBayes(fit, trend=TRUE)
tmp <- topTable(fit, coef=ncol(design), p.value = 0.05)
tmp <- topTable(fit, coef=ncol(design), p.value = 0.05, number = NULL)
tmp <- topTable(fit, coef=ncol(design), p.value = 0.05, number = Inf)
View(tmp)
tmp <- topTable(fit, coef=ncol(design), p.value = 0.05, lfc = log(1.5),number = Inf)
View(tmp)
View(fpkm)
View(c2kegg)
reslfc_sig <- reslfc %>% as.data.frame() %>%
rownames_to_column("gene") %>%
filter(abs(log2FoldChange) > log2(1.5) & padj < 0.05) %>%
mutate(comparison = ifelse(log2FoldChange > 0, "higher in pos compared to neg", "lower in pos compared to neg")) %>%
mutate(kegg = c2kegg$ont[match(gene, c2kegg$gene)])
print(load("dds.Rdata"))
reslfc_sig <- reslfc %>% as.data.frame() %>%
rownames_to_column("gene") %>%
filter(abs(log2FoldChange) > log2(1.5) & padj < 0.05) %>%
mutate(comparison = ifelse(log2FoldChange > 0, "higher in pos compared to neg", "lower in pos compared to neg")) %>%
mutate(kegg = c2kegg$ont[match(gene, c2kegg$gene)])
reslfc_sig %>%
WriteXLS::WriteXLS(ExcelFileName = "celltype.pos_vs_neg.lfc.xls", AdjWidth = T, BoldHeaderRow = T)
select_genes <- reslfc_sig$gene
#########
pheatmap(assay(vsd)[select_genes,] %>% t %>% scale %>% t %>% Seurat::MinMax(-2, 2),
#scale = "row",
clustering_method = "ward.D",
cluster_rows=T,
show_rownames=FALSE,
cluster_cols=T,
border_color = NA,
annotation_col= annot,
annotation_row = reslfc_sig %>% dplyr::select("gene", "comparison") %>% column_to_rownames("gene"))
#########
pheatmap(assay(vsd)[select_genes,] %>% t %>% scale %>% t %>% Seurat::MinMax(-2, 2),
#scale = "row",
clustering_method = "ward.D",
cluster_rows=T,
show_rownames=T,
cluster_cols=T,
border_color = NA,
annotation_col= annot,
annotation_row = reslfc_sig %>% dplyr::select("gene", "comparison") %>% column_to_rownames("gene"))
#########
pheatmap(assay(vsd)[select_genes,] %>% t %>% scale %>% t %>% Seurat::MinMax(-2, 2),
#scale = "row",
clustering_method = "ward.D",
cluster_rows=T,
show_rownames=T,
cluster_cols=T,
border_color = NA,
annotation_col= annot,
annotation_row = reslfc_sig %>% dplyr::select("gene", "comparison") %>% column_to_rownames("gene"))
library(convgene)
library(ggplot2)
GeomPolygon
geom_polygon
layer
GeomPolygon$draw_panel
ConvertHomoGene
library(convgene)
ConvertHomoGene
ConvertHomoGene(genes = "PTPRC")
df <- data.frame(
gp = factor(rep(letters[1:3], each = 10)),
y = rnorm(30)
)
ds <- do.call(rbind, lapply(split(df, df$gp), function(d) {
data.frame(mean = mean(d$y), sd = sd(d$y), gp = d$gp)
}))
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
debug(ggplot)
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
mapping
inherits(mapping, :uneval)
inherits(mapping, "uneval")
View(data)
data
View(data)
fortify
structure
make_labels
set_last_plot
last_plot
.store$get()
.store$get
.store$get()
ggplot() +
geom_point(df, aes(gp, y)) +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
last_plot()
ggplot() +
geom_point(data = df, aes(gp, y)) +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
ggplot() +
geom_point(data = df, aes(gp, y)) +
geom_point(data = ds, aes(gp,y = mean), colour = 'red', size = 3)
base <- ggplot(mpg, aes(displ, hwy)) + geom_point()
undebug(ggplot)
base <- ggplot(mpg, aes(displ, hwy)) + geom_point()
base
base + geom_smooth()
base %+% subset(mpg, fl == "p")
base + list(subset(mpg, fl == "p"), geom_smooth())
ggplot() +
geom_point(data = df, aes(gp, y)) +
geom_point(data = ds, aes(gp,y = mean), colour = 'red', size = 3) %+% df
ggplot() +
geom_point(data = df, aes(gp, y)) +
geom_point(data = ds, aes(gp,y = mean), colour = 'red', size = 3) -> tmp
tmp %+% df
tmp
tmp %+% ds
tmp %+% subset(mpg, fl == "p")
ggplot(data = df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(gp,y = mean), colour = 'red', size = 3) -> tmp
tmp
tmp %+% mpg
add_el <- theme_grey() +
theme(text = element_text(family = "Times"))
add_el$text
rep_el <- theme_grey() %+replace%
theme(text = element_text(family = "Times"))
rep_el$text
rep_el$line
add_el$line
xmin
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
debug(geom_point)
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
library(convgene)
3/2
2/1
10/9
9/8
rmultinom(6, 5)
rmultinom(6, 5, 1/6)
rmultinom(6, , 1/6)
rmultinom(6, 6, 1/6)
rmultinom(6, 6, rep(1,6)/6)
rmultinom(6, 10, rep(1,6)/6)
rmultinom(1000, 10, rep(1,6)/6)
dmultinom(rep(1,6), prob = rep(1, 6)/6)
pnorm(1)
pnorm(0)
qnorm(0)
#' @param n.max collected 1:n.max coupons
#' @param B an integer specifying the number of replicates used in the Monte Carlo test.
#' @param seed for reproducibility
#' @param replace sample wi/o replacing
#'
#' @return a vector of probabilities for 1:n.max cllections
#' @export
#'
#' @examples
#'
pmultinom_sample <- function(prob, k = length(prob), n.max = 100, B = 1000, seed = 66, replace = TRUE){
result <- NULL
set.seed(seed)
for (i in seq_len(B)) {
result <- rbind(result, sample(paste0("k", seq_len(k)), n.max, replace=replace, prob=prob))
}
res_p <- NULL
for (j in 1:n.max) {
res_p[j] <- sum(apply(result[,1:j,drop = F], 1, function(x) length(unique(x))) == k)/B
}
return(res_p)
}
pmultinom_sample(rep(1,6)/6)
library(convgene)
2/1.5
basename("./asdfa/djfka.dd")
fs::path_ext_set("dir/file.zip", ".gz")
fs::path_ext_set
fs::path_tidy
basename("dfad/sdfa.g")
dirname("dfad/sdfa.g")
dirname("dfad/sadfa/sdfa.g")
strsplit("Adfaf/sdfadf.d", split = "d")
strsplit("Adfaf/sdfadf.d", split = ".")
strsplit("Adfaf/sdfadf.d", split = "\\.")
tmp <- strsplit("Adfaf/sdfadf.d", split = "\\.")[[1]]
paste0("F_", tmp[1])
paste0("F_", tmp[2])
paste0("F_", tmp[1,2])
paste0("F_", tmp[c(1,2)])
tmp <- strsplit("Adfaf/sdfadf.d", split = "d")[[1]]
paste0("F_", tmp[c(1,2)])
tmp[c(1,2)] <- paste0("F_", tmp[c(1,2)])
tmp
paste(tmp, collapse = "\\.")
paste(tmp, collapse = ".")
paste0(tmp, collapse = ".")
paste0(tmp, collapse = "\\.")
regexec("\\.")
#' @param prefix prefix character
#' @param sep split file name by sep into multiple parts
#' @param index add prefix to the index part
#'
#' @return new file name
#' @export
#'
#' @examples
#' prefix_file_name("./database/msigdb.gmt", "homo")
#'
prefix_file_name <- function(file_name, prefix, sep = ".", index = 1){
dir <- dirname(file_name)
base <- basename(file_name)
base.split <- strsplit(base, split = sep, fixed = T)[[1]]
base.split[index] <- paste0(prefix, base.split[index])
file.path(dir, paste(base.split, collapse = sep))
}
prefix_file_name("./database/msigdb.gmt", "homo")
#' @param sep split file name by sep into multiple parts
#' @param index add prefix to the index part
#'
#' @return new file name
#' @export
#'
#' @examples
#' prefix_file_name("./database/msigdb.gmt", "homo_")
#' # "./database/homo_msigdb.gmt"
#'
presuf_file_name <- function(file_name, prefix = NULL, suffix = NULL, sep = ".", index = 1){
dir <- dirname(file_name)
base <- basename(file_name)
base.split <- strsplit(base, split = sep, fixed = T)[[1]]
base.split[index] <- paste0(prefix, base.split[index], suffix)
file.path(dir, paste(base.split, collapse = sep))
}
presuf_file_name("./database/msigdb.gmt", "homo_")
presuf_file_name("./database/msigdb.gmt", "homo_",".v7.4")
presuf_file_name("./database/msigdb.gmt", "homo_","_v7.4")
tmp
tmp[-1]
tmp
-1 %% 10
0 %% 10
1 %% 10
-1 %% 10
-2 %% 10
-0 %% 10
end(tmp)
tail(tmp)
tmp
tail(tmp, 1)
tail(tmp, 2)
length(tmp)
length(tmp) + -1
#' @param sep split file name by sep into multiple parts
#' @param index add prefix to the index part. if <= 0, reverse order is used, then 0 is the last one and -1 is the last but one.
#'
#' @return new file name
#' @export
#'
#' @examples
#' presuf_file_name("./database/msigdb.gmt", "homo_")
#' # "./database/homo_msigdb.gmt"
#'
presuf_file_name <- function(file_name, prefix = NULL, suffix = NULL, sep = ".", index = 1){
dir <- dirname(file_name)
base <- basename(file_name)
base.split <- strsplit(base, split = sep, fixed = T)[[1]]
if(index <= 0){
index <- length(base.split) + index
}
base.split[index] <- paste0(prefix, base.split[index], suffix)
file.path(dir, paste(base.split, collapse = sep))
}
library(convgene)
homoMSigDB("D:/Project_Ube2i/analysis210105/c3.tft.gtrd.v7.4.symbols.gmt")
date()
Sys.Date()
Sys.time()
library(convgene)
tmp <- factor(1:3)
tmp
tmp <- factor(paste0("A",1:3))
tmp
tmp <- as.character(tmp)
tmp
tmp <- factor(paste0("A",1:3))
tmp
mode(tmp) <- "character"
library(convgene)
